#include <iostream>
#include<opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/video.hpp>
#include <opencv2/video/tracking.hpp>
#include<vector>
#include<string>
#include<cstring>
#include <opencv2/imgcodecs.hpp>
#include<windows.h>
#include <numeric>      // std::iota
#include <algorithm>    // std::sort, std::stable_sort
#include<math.h>
#include<map>

#ifdef _DEBUG
#pragma comment(lib, "opencv_world452d.lib")
#else
#pragma comment(lib, "opencv_world452.lib")
#endif

FILE* fp = NULL;//ファイルポインタ宣言
char FileName[127] = { "FILE_AD" };//ファイルの名前用の文字列
using namespace cv;
using namespace std;

int maxPointsearch(vector<KeyPoint> contours) {
    double maxy = contours.at(0).pt.y;
    int index = 0;
    for (int i = 1; i < contours.size(); i++) {
        if (maxy < contours.at(i).pt.y) {
            maxy = contours.at(i).pt.y;
            index = i;
        }
    }
    return index;
}

int minPointsearch(vector<KeyPoint> contours) {
    double miny = contours.at(0).pt.y;
    int index = 0;
    for (int i = 1; i < contours.size(); i++) {
        if (miny > contours.at(i).pt.y) {
            miny = contours.at(i).pt.y;
            index = i;
        }
    }
    return index;
}

Point minPoint(vector<KeyPoint> contours) {
    double minx = contours.at(0).pt.x;
    int index = 0;
    for (int i = 1; i < contours.size(); i++) {
        if (minx > contours.at(i).pt.x) {
            minx = contours.at(i).pt.x;
            index = i;
        }
    }
    return Point(contours.at(index).pt.x, contours.at(index).pt.y);
}

double TryangleArea(Point a, Point b, Point c) {
    double AB_x = (double)b.x - (double)a.x;
    double AB_y = (double)b.y - (double)a.y;
    double AC_x = (double)c.x - (double)a.x;
    double AC_y = (double)c.y - (double)a.y;
    double AREA = abs(AB_x * AC_y - AB_y * AC_x) * 0.5;

    return AREA;
}

int MatArea(Mat canny) {
    vector<int> Area(1000);
    //dilate(canny, canny, Mat(), Point(-1, -1), 3);

    vector<vector<Point> > contours;
    findContours(canny, contours, RETR_TREE, CHAIN_APPROX_SIMPLE);

    Mat drawing = Mat::zeros(canny.size(), CV_8UC3);
    RNG rng(12345);

    for (size_t i = 0; i < contours.size(); i++) {
        Scalar color = cv::Scalar(rng.uniform(0, 256), rng.uniform(0, 256), rng.uniform(0, 256));
        drawContours(drawing, contours, (int)i, color);
        Area.at(i) = contourArea(contours[i]);
    }

    sort(Area.begin(), Area.end(), greater<int>());

    return Area.at(0);
}

Mat Bit_Wise2(Mat img1, Mat img2) {
    Mat img1_gry, img2_gry, img_gry;
    cvtColor(img1, img1_gry, COLOR_BGR2GRAY);
    cvtColor(img2, img2_gry, COLOR_BGR2GRAY);
    absdiff(img1_gry, img2_gry, img_gry);

    return img_gry;
}

int main(int argc, const char* argv[]) {
    errno_t error;
    SYSTEMTIME systime;//時間記録用
    GetLocalTime(&systime);
    sprintf_s(FileName, "%d_%d_%dh%dm%d.csv", systime.wMonth, systime.wDay, systime.wHour, systime.wMinute, systime.wSecond);
    error = fopen_s(&fp, FileName, "w+");//ファイル書き込み呼び出し

    VideoCapture capture(0);
    Mat frame1, frame2;
    Mat frame1_gry, frame2_gry;
    Mat edge1, edge2;
    Mat img1, img2, img3, img4, diff, edge;
    capture >> frame1;
    Rect roi;
    roi = selectROI("tracker", frame1);
    if (roi.width == 0 || roi.height == 0) {
        return 0;
    }
    frame1 = frame1(roi);
    img1 = frame1.clone();
    //cvtColor(frame1, frame1_gry, COLOR_BGR2GRAY);
    //Canny(frame1_gry, edge1, 50, 100, 3, true);
    auto algorithm = AKAZE::create();
    vector<KeyPoint> keypoint1, keypoint2;
    algorithm->detect(img1, keypoint1);
    Mat descriptor1, descriptor2;
    algorithm->compute(img1, keypoint1, descriptor1);
    double b_area = 0;
    int count = 0;
    vector<int>countx(100);
    vector<int>county(100);
    vector<pair<int,int>>countdx(100);
    vector<int>index(100);
    vector<Point>coord(100);
    vector<Point>origincoord(100);
    for (;;) {
        waitKey(1);
        capture >> frame2;

        img2 = frame2.clone();
        img3 = frame2.clone();
        img4 = frame2.clone();
        frame2 = frame2(roi);
        /*
        cvtColor(frame2, frame2_gry, COLOR_BGR2GRAY);
        Canny(frame2_gry, edge, 50, 100, 3, true);
        */
        diff = Bit_Wise2(frame1, frame2);
        medianBlur(diff, diff, 3);
        Canny(diff, edge, 50, 100, 3, true);
        dilate(edge, edge, Mat(), Point(-1, -1), 5);
        bitwise_and(img3(roi), img3(roi), img4, edge);
        //imshow("1", frame1_gry);
        //imshow("2", descriptor1);

        
        int white = MatArea(edge);
        if (white < 1000) {
            //dilate(diff, diff, Mat(), Point(-1, -1), 3);
            Mat kernel = getStructuringElement(MORPH_RECT, Size(9, 9));
            //morphologyEx(diff, diff, MORPH_OPEN, kernel);
        }
        //Canny(diff, edge2, 50, 100, 3, true);
        algorithm->detect(img4, keypoint2);
        algorithm->compute(img4, keypoint2, descriptor2);
        Ptr<DescriptorMatcher> matcher = DescriptorMatcher::create("BruteForce");
        vector<DMatch> match, match12, match21;
        matcher->match(descriptor1, descriptor2, match12);
        matcher->match(descriptor2, descriptor1, match21);

        frame1 = frame2.clone();
        /*
        for (size_t i = 0; i < match12.size(); i++)
        {
            DMatch forward = match12[i];
            DMatch backward = match21[forward.trainIdx];
            if (backward.trainIdx == forward.queryIdx)
            {
                match.push_back(forward);
            }
        }
        */

        Mat dest;
        drawMatches(frame1, keypoint1, frame2, keypoint2, match, dest, Scalar::all(-1));
        imshow("matching", dest);
        waitKey(1);
        int b = keypoint2.size();
        if (b < 10) {
            continue;
        }
        
        Mat black=Mat::zeros(500,500,CV_8UC3);
        int iq = 0;
        int sumx = 0,sumy=0;
        int avrx = 0,avry=0;
        for (int i = 0; i < keypoint2.size(); i++) {
            if (i % 5 == 0) {
                //printf("prvs:%d,%d\n", (int)keypoint2.at(i).pt.x, (int)keypoint2.at(i).pt.y);
                printf("%d\n",iq);
                countdx.at(iq).first = (int)keypoint2.at(i).pt.x;
                countdx.at(iq).second = (int)keypoint2.at(i).pt.y;
                //sumy += countx.at(iq);
                //sumx += (int)keypoint2.at(i).pt.x;
                //index.at(iq) = (int)keypoint2.at(i).pt.x;
                //origincoord.at(iq) = keypoint2.at(i).pt;
                //circle(black, keypoint2.at(i).pt, 2, Scalar(255, 255, 255), 2, 5);
                iq++;
            }
        }
        sort(countdx.rbegin(), countdx.rend());
        //sort(county.begin(), county.end(),greater<int>());
        int green = 0;
        for (green = 0; green < iq*2/3; green++) {
            sumx += countdx.at(green).first;
            sumy += countdx.at(green).second;
            circle(black, Point(countdx.at(green).first,countdx.at(green).second), 2, Scalar(255, 255, 255), 2, 5);

        }

        //avrx = sumx / iq;
        //avry = sumy / iq;
        avrx = sumx / green;
        avry = sumy / green;
        //printf("%d\n", avr);
        int cq = 0, bq = 0;
        vector<pair<int,int>> up(500);
        vector<pair<int,int>> down(500);
        Point upG = Point(0, 0);
        Point downG = Point(0, 0);
        Mat neoblack = Mat::zeros(500, 500, CV_8UC3);
        for (int i = 0; i < keypoint2.size(); i++) {
            if (keypoint2.at(i).pt.x > avrx) {
                if (keypoint2.at(i).pt.y > avry) {
                    up.at(cq).first = (int)keypoint2.at(i).pt.x;
                    up.at(cq).second = (int)keypoint2.at(i).pt.y;
                    circle(neoblack, keypoint2.at(i).pt, 2, Scalar(0, 255, 255), 2, 5);
                    cq++;
                }
                else {
                    down.at(bq).first = keypoint2.at(i).pt.x;
                    down.at(bq).second = keypoint2.at(i).pt.y;
                    circle(neoblack, keypoint2.at(i).pt, 2, Scalar(255, 255, 0), 2, 5);
                    bq++;
                }
            }
            else {
                circle(neoblack, keypoint2.at(i).pt, 2, Scalar(255, 0, 255), 2, 5);
            }
        }
        printf("\n");
        //dilate(black, black, Mat(), Point(-1, -1), 8);
        
        int sumupx = 0, sumupy = 0, sumdownx = 0, sumdowny = 0;
        int avrupx = 0, avrupy = 0, avrdownx = 0, avrdowny = 0;
        sort(up.rbegin(), up.rend());
        sort(down.rbegin(), down.rend());
        /*
        for (int blue = 0; blue < 10; blue++) {
            sumupx += up.at(blue).first;
            sumupy += up.at(blue).second;
            sumdownx += down.at(blue).first;
            sumdowny += down.at(blue).second;
            
            if (blue == 9) {
                avrupx = sumupx / blue;
                avrupy = sumupy / blue;
                avrdownx = sumdownx / blue;
                avrdowny = sumdowny / blue;
                upG = Point(avrupx, avrupy);
                downG = Point(avrdownx, avrdowny);
                circle(black, upG, 5, Scalar(0, 55, 55), 2, 5);
                circle(black, downG, 5, Scalar(55, 55, 0), 2, 5);
            }
        }   
        */
        upG = Point(up.at(4).first, up.at(4).second);
        downG = Point(down.at(4).first, down.at(4).second);
        if (upG == Point(0, 0) || downG == Point(0, 0)) {
            continue;
        }
        circle(img4, upG, 5, Scalar(0, 255, 255), -1, 5);
        circle(img4, downG, 5, Scalar(255, 255, 0), -1, 5);
        imshow("blacky", black);
        imshow("blacky2", neoblack);
        waitKey(1);
        //sort(countx.begin(), countx.end());
        /*
        for (int i = 0; i < iq; i++){

            for (int j = 0; j < iq; j++) {
                if (countx.at(i) == index.at(j)) {
                    coord.at(i) = origincoord.at(j);
                }
            }
            printf("%d,%d\n", i,coord.at(i).x);
        }
        */
        /*
        for (int i = 0; i < iq; i++) {
            printf("next:%d,%d\n", coord.at(i).x, coord.at(i).y);
        }
        */
        //coord = {};
        //countx = {};
        //index = {};
        /*
        vector< vector<Point> > contours;
        vector< vector<Point> > contours_subset;
        vector<Vec4i> hierarchy;
        threshold(black, black, 120, 255, THRESH_BINARY);
        findContours(black, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);
        if (contours.size() < 1) {
            continue;
        }

        for (int i = 0; i < contours.size(); i++) {
            double area = contourArea(contours.at(i)); // 輪郭線から領域を求める
            if (area > 70 && area < 500) { // 領域面積の指定
                contours_subset.push_back(contours.at(i));
            }
        }

        Mat neoblack = Mat::zeros(500, 500, CV_8UC3);
        for (int j = 0; j < contours_subset.size(); j++) {
            for (int i = 0; i < contours_subset.at(j).size(); i++) {
                circle(neoblack, Point(contours_subset.at(i).at(j).x, contours_subset.at(i).at(j).y), 2, Scalar(255, 255, 255), 2, 5);
            }
        }
        imshow("en", neoblack);
        waitKey(1);
        */
        //int a = keypoint1.size();
        /*
        //vector<int> coordinate1_y(a);
        Point Gx = Point(0, 0);
        Point Gy = Point(0, 0);
        Point Gz = Point(0, 0);
        int minindex = minPointsearch(keypoint2);
        int maxindex = maxPointsearch(keypoint2);
        for (int k = 0; k < keypoint2.size(); k++) {
            //coordinate1_y.at(k) = keypoint1.at(k).pt.y;
        }
        //sort(coordinate1_x.begin(), coordinate1_x.end());
        //sort(coordinate1_y.begin(), coordinate1_y.end());
        //int min = *min_element(coordinate1_y.begin(), coordinate1_y.end());
        //int max = *max_element(coordinate1_y.begin(), coordinate1_y.end());
        Gx = Point(keypoint2.at(minindex).pt.x, keypoint2.at(minindex).pt.y);
        Gy = Point(keypoint2.at(maxindex).pt.x, keypoint2.at(maxindex).pt.y);
        Gz = minPoint(keypoint2);
        circle(frame2, Gx, 10, Scalar(0, 0, 255), 3, 8);
        circle(frame2, Gy, 10, Scalar(255, 0, 0), 3, 8);
        circle(frame2, Gz, 10, Scalar(0, 255, 0), 3, 8);
        line(frame2, Gx, Gy, Scalar(255, 0, 255), 4, 8);
        line(frame2, Gx, Gz, Scalar(0, 255, 255), 4, 8);
        line(frame2, Gy, Gz, Scalar(255, 255, 0), 4, 8);
        double length = sqrt(pow((double)Gx.x - (double)Gy.x, 2.0) + pow((double)Gx.y - (double)Gy.y, 2.0));
        printf("%lf\n", length);
        fprintf(fp, "AREA:,%lf\n", length);
        count++;
        double area = TryangleArea(Gx, Gy, Gz);
        if (area < 1000) {
            continue;
        }

        if (abs(b_area - area) < 360) {
            fprintf(fp, "AREA:,%lf\n", area);
            b_area = area;
        }

        if (count == 1) {
            b_area = area;
        }
        */
        //imshow("diff", edge);
        line(img4, upG, downG, Scalar(255, 255, 255), 3);
        imshow("ans", img4);

        //imshow("en", frame2);
        if (waitKey(33) == 27) {//breakは必須
            break;
        }

        /*
        vector <double> deg1(100);
        vector <double> deg2(100);
        vector <double> len1(100);
        vector <double> len2(100);

        for (int k = 0; k < 10; k++) {
            int q = keypoint1.at(k).size;
            int p = keypoint2.at(k).size;

            printf("%d(%d)(%d)\n", k, q, p);
            //printf("%lf\n", sqrt(pow((double)keypoint1.at(k).pt.x - (double)keypoint2.at(k).pt.x, 2.0) + pow((double)keypoint1.at(k).pt.y - (double)keypoint2.at(k).pt.y, 2.0)));
            //printf("%lf\n", pow((double)keypoint1.at(k).pt.x - (double)keypoint2.at(k).pt.x, 2.0));
            for (int j = 0; j < 10; j++) {
                if (p >= j && q>=j) {
                    len1.at(k) = sqrt(pow((double)keypoint1.at(k).pt.x - (double)keypoint1.at(j).pt.x, 2.0) + pow((double)keypoint1.at(k).pt.y - (double)keypoint1.at(j).pt.y, 2.0));
                    len2.at(k) = sqrt(pow((double)keypoint2.at(k).pt.x - (double)keypoint2.at(j).pt.x, 2.0) + pow((double)keypoint2.at(k).pt.y - (double)keypoint2.at(j).pt.y, 2.0));
                    deg1.at(k) = atan2(keypoint1.at(k).pt.x - keypoint1.at(j).pt.x, keypoint1.at(k).pt.y - keypoint1.at(j).pt.y);
                    deg2.at(k) = atan2(keypoint2.at(k).pt.x - keypoint2.at(j).pt.x, keypoint2.at(k).pt.y - keypoint2.at(j).pt.y);
                    printf("1:%lf\n", len1.at(k));
                    printf("2:%lf\n", len2.at(k));
                    printf("11:%lf\n", deg1.at(k));
                    printf("22:%lf\n", deg2.at(k));
                    //printf("deg(% d)(% d) =%lf\n", i, j, deg.at(i).at(j));
                }
                else {
                    break;
                }
            }
        }
        */
    }
    fclose(fp);
    return 0;
}
