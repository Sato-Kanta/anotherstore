#define STRICT
#define NOMINMAX

#include <opencv2/core/utility.hpp>
#include <opencv2/video/tracking.hpp>
#include <opencv2/videoio.hpp> // videoioのヘッダーをインクルード
#include <opencv2/highgui.hpp> // highguiのヘッダーをインクルード
#include <opencv2/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc/imgproc_c.h>
#include <opencv2/highgui/highgui_c.h>
#include <opencv2/objdetect/detection_based_tracker.hpp>
#include <iostream>
#include<string>
#include <vector>
#include <stdio.h>
#include<math.h>
#include<process.h>
#include<windows.h>
#include<windowsx.h>
#include <tchar.h>
#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/video.hpp>
#include<cstring>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/tracking.hpp>
#include <numeric>      // std::iota
#include <algorithm>    // std::sort, std::stable_sort
#include <opencv2/video/background_segm.hpp>
#include <functional>
#include<stdlib.h>　//WM＿TIMERの精度が心配な時
#include<time.h>　　//WM＿TIMERの精度が心配な時
#include <random>
#include<map>

#ifdef _DEBUG
#pragma comment(lib, "opencv_world452d.lib")
#else
#pragma comment(lib, "opencv_world452.lib")
#endif

using namespace cv;
using namespace std;

Mat Bit_Wise2(Mat img1, Mat img2) {
	Mat img1_gry, img2_gry, img_gry;
	cvtColor(img1, img1_gry, COLOR_BGR2GRAY);
	cvtColor(img2, img2_gry, COLOR_BGR2GRAY);
	absdiff(img1_gry, img2_gry, img_gry);

	return img_gry;
}

Point center(Point max, Point min, Point MAX, Point MIN) {
	Point v;
	int k = 0;
	double s1 = 0, s2 = 0;
	int P1X = MIN.x;
	int P1Y = MIN.y;
	int P2Y = min.y;
	int P2X = min.x;
	int P3X = MAX.x;
	int P3Y = MAX.y;
	int P4Y = max.y;
	int P4X = max.x;

	s1 = ((P4X - P2X) * (P1Y - P2Y) - (P4Y - P2Y) * (P1X - P2X)) / 2;
	s2 = ((P4X - P2X) * (P2Y - P3Y) - (P4Y - P2Y) * (P2X - P3X)) / 2;

	v = Point(0, 0);
	v.x = P1X + ((double)P3X - (double)P1X) * s1 / (s1 + s2);
	v.y = P1Y + ((double)P3Y - (double)P1Y) * s1 / (s1 + s2);

	return v;
}

int main(int argc, const char* argv[]) {
	VideoCapture capture(0);
	Mat frame1, frame2,gry;
	Mat img, img2, img3;
	Rect selection(150, 50, 400, 350);
	Mat diff;
	Mat edge;
	vector<pair<int, int>>countdx(500);
	double sumx = 0, sumy = 0;
	Point G = Point(0, 0);
	int a = 0, b = 0, c = 0, d = 0;
	double PI = 22 / 7;
	
	frame1 = imread("image1.png");
	frame2 = imread("image2.png");
	img = frame2.clone();
	img2 = frame2.clone();
	diff = Bit_Wise2(frame1(selection), frame2(selection));
	
	medianBlur(diff, diff, 3);
	Canny(diff, edge, 50, 100, 3, true);
	dilate(edge, edge, Mat(), Point(-1, -1), 7);
	
	bitwise_and(img2(selection), img2(selection), img, edge);
	//imshow("a", img);
	auto algorithm = AKAZE::create();
	vector<KeyPoint> keypoint;
	algorithm->detect(img, keypoint);
	for (int i = 0; i < keypoint.size(); i++) {
		//circle(img, keypoint.at(i).pt, 1, Scalar(0, 255, 255), 2, 5);

		countdx.at(i).first = (int)keypoint.at(i).pt.x;
		countdx.at(i).second = (int)keypoint.at(i).pt.y;
		sumx+= (double)keypoint.at(i).pt.x;
		sumy+= (double)keypoint.at(i).pt.y;
		a++;
	}
	G.x = sumx / (double)a;
	G.y = sumy / (double)a;
	circle(img, G, 4, Scalar(255, 0, 255), 2, 5);

	vector<double> distance(a);
	vector<double> radian(a);
	vector<double> degree(a);
	vector<pair<double, double>> data(a);
	for (int j = 0; j < a; j++) {
		//distance.at(j) = sqrt(pow(abs(G.x - (double)keypoint.at(j).pt.x), 2) + pow(abs(G.y - (double)keypoint.at(j).pt.y), 2));
		//radian.at(j) = atan2(G.y - (double)keypoint.at(j).pt.y, G.x - (double)keypoint.at(j).pt.x);
		data.at(j).second = sqrt(pow(G.x - (double)keypoint.at(j).pt.x, 2) + pow(G.y - (double)keypoint.at(j).pt.y, 2));
		data.at(j).first = atan2(G.y - (double)keypoint.at(j).pt.y, G.x - (double)keypoint.at(j).pt.x);
		degree.at(j) = radian.at(j) * (double)180 / PI;
		//printf("%f,%f\n", data.at(j).first, data.at(j).second);
	}
	sort(data.begin(), data.end());
	vector<double> maxstore(7);
	vector<int> indexstore(7);
	vector<pair<double, int>> store(6);
	Point edge1 = Point(0, 0);
	Point edge2 = Point(0, 0);
	Point edge3 = Point(0, 0);
	double set_radian = -2;
	int s = 0;

	for (int k = 0; k < a; k++) {
		//printf("%f,%f\n", data.at(k).first, data.at(k).second);
		if (data.at(k).first > set_radian) {
			set_radian += 1;
			s++;
			if (s > 5) {
				break;
			}
		}

		if (data.at(k).first < set_radian) {
			if (store.at(s).first < data.at(k).second) {
				store.at(s).first = data.at(k).second;
				store.at(s).second = k;
			}
			
		}
	}
	sort(store.rbegin(), store.rend());
	for (int q = 0; q < a; q++) {
		distance.at(q)= sqrt(pow(G.x - (double)keypoint.at(q).pt.x, 2) + pow(G.y - (double)keypoint.at(q).pt.y, 2));
		if (distance.at(q) == store.at(0).first) {
			edge1 = keypoint.at(q).pt;
			circle(img, edge1, 4, Scalar(0, 0, 255), -1, 5);
		}
		else if (distance.at(q) == store.at(1).first) {
			edge2 = keypoint.at(q).pt;
			circle(img, edge2, 4, Scalar(0, 255, 0), -1, 5);
		}
		else if (distance.at(q) == store.at(2).first) {
			edge3 = keypoint.at(q).pt;
			circle(img, edge3, 4, Scalar(255, 0, 0), -1, 5);
		}
	}
	
	imshow("a", img);
	waitKey(0);

	vector<double>distance1(a);
	vector<double>distance2(a);
	vector<double>distance3(a);
	vector<Point>keep1(a);
	vector<Point>keep2(a);
	vector<Point>keep3(a);
	vector<Point> G1(5);
	vector<Point> G2(5);
	vector<Point> G3(5);
	vector<double>G1maxstore(6);
	vector<double>G1minstore(6);
	vector<double>G2maxstore(6);
	vector<double>G2minstore(6);
	vector<double>G3maxstore(6);
	vector<double>G3minstore(6);
	vector<double> asp1(5);
	vector<double> asp2(5);
	vector<double> asp3(5);

	
	for (int r = 0; r < 5; r++) {//領域増加
		int u1 = 0, u2 = 0, u3 = 0;
		double sumx1 = 0;
		double sumy1 = 0;
		double sumx2 = 0;
		double sumy2 = 0;
		double sumx3 = 0;
		double sumy3 = 0;
		//double set_distance = (store.at(0).first / 3)+(store.at(0).first / 8)*r;
		double set_distance = (store.at(0).first / 6)*(r+1);
		for (int u = 0; u < a; u++) {//全体検索
			distance1.at(u) = sqrt(pow(edge1.x - (double)keypoint.at(u).pt.x, 2) + pow(edge1.y - (double)keypoint.at(u).pt.y, 2));
			distance2.at(u) = sqrt(pow(edge2.x - (double)keypoint.at(u).pt.x, 2) + pow(edge2.y - (double)keypoint.at(u).pt.y, 2));
			distance3.at(u) = sqrt(pow(edge3.x - (double)keypoint.at(u).pt.x, 2) + pow(edge3.y - (double)keypoint.at(u).pt.y, 2));
			if (distance1.at(u) < set_distance) {
				sumx1 += keypoint.at(u).pt.x;
				sumy1 += keypoint.at(u).pt.y;
				keep1.at(u1) = keypoint.at(u).pt;
				circle(img, keypoint.at(u).pt, 1, Scalar(0, 0, 255), 2, 5);
				u1++;
			}
			else if (distance2.at(u) < set_distance) {
				sumx2 += keypoint.at(u).pt.x;
				sumy2 += keypoint.at(u).pt.y;
				keep2.at(u2) = keypoint.at(u).pt;
				circle(img, keypoint.at(u).pt, 1, Scalar(0, 255, 0), 2, 5);
				u2++;
			}
			else if (distance3.at(u) < set_distance) {
				sumx3 += keypoint.at(u).pt.x;
				sumy3 += keypoint.at(u).pt.y;
				keep3.at(u3) = keypoint.at(u).pt;
				circle(img, keypoint.at(u).pt, 1, Scalar(255, 0, 0), 2, 5);
				u3++;
			}
		}
		G1.at(r).x = sumx1 / u1;
		G1.at(r).y = sumy1 / u1;
		G2.at(r).x = sumx2 / u2;
		G2.at(r).y = sumy2 / u2;
		G3.at(r).x = sumx3 / u3;
		G3.at(r).y = sumy3 / u3;
		//circle(img, G1, 2, Scalar(0, 255, 255), 2, 5);
		//circle(img, G2, 2, Scalar(255, 255, 0), 2, 5);
		//circle(img, G3, 2, Scalar(255, 0, 255), 2, 5);
		vector<pair<double, double>> G1data(u1);
		vector<pair<double, double>> G2data(u2);
		vector<pair<double, double>> G3data(u3);
		

		//長さと角度の計算
		for (int r1 = 0; r1 < u1; r1++) {
			G1data.at(r1).second = sqrt(pow(G1.at(r).x - keep1.at(r1).x, 2) + pow(G1.at(r).y - keep1.at(r1).y, 2));
			G1data.at(r1).first = atan2(G1.at(r).y - keep1.at(r1).y, G1.at(r).x - keep1.at(r1).x);
			//printf("%f,%f\n", G1data.at(r1).first, G1data.at(r1).second);
		}
		printf("\n");
		for (int r2 = 0; r2 < u2; r2++) {
			G2data.at(r2).second = sqrt(pow(G2.at(r).x - keep2.at(r2).x, 2) + pow(G2.at(r).y - keep2.at(r2).y, 2));
			G2data.at(r2).first = atan2(G2.at(r).y - keep2.at(r2).y, G2.at(r).x - keep2.at(r2).x);
			//printf("%f,%f\n", G2data.at(r2).first, G2data.at(r2).second);
		}
		printf("\n");
		for (int r3 = 0; r3 < u3; r3++) {
			G3data.at(r3).second = sqrt(pow(G3.at(r).x - keep3.at(r3).x, 2) + pow(G3.at(r).y - keep3.at(r3).y, 2));
			G3data.at(r3).first = atan2(G3.at(r).y - keep3.at(r3).y, G3.at(r).x - keep3.at(r3).x);
			//printf("%f,%f\n", G3data.at(r3).first, G3data.at(r3).second);
		}
		
		sort(G1data.begin(), G1data.end());
		sort(G2data.begin(), G2data.end());
		sort(G3data.begin(), G3data.end());
		int s1 = 0, s2 = 0, s3 = 0;
		double set_radian1 = -2;
		double set_radian2 = -2;
		double set_radian3 = -2;
		//ラジアン6等分&最大値取得
		for (int e1 = 0; e1 < u1; e1++) {
			
			if (e1 == 0) {
				G1minstore.at(s1) = G1data.at(e1).second;
			}

			if (G1data.at(e1).first > set_radian1) {
				set_radian1 += 1;
				s1++;
				if (s1 > 5) {
					break;
				}
				G1minstore.at(s1) = G1data.at(e1).second;
			}

			if (G1data.at(e1).first < set_radian1) {
				if (G1maxstore.at(s1) < G1data.at(e1).second) {
					G1maxstore.at(s1) = G1data.at(e1).second;
				}
				
				if (G1minstore.at(s1) > G1data.at(e1).second) {
					G1minstore.at(s1) = G1data.at(e1).second;
				}
			}
		}
		
		for (int e2 = 0; e2 < u2; e2++) {
			//printf("%f\n", G2data.at(e2).second);
			if (e2 == 0) {
				G2minstore.at(s2) = G2data.at(e2).second;
			}

			if (G2data.at(e2).first > set_radian2) {
				set_radian2 += 1;
				s2++;
				if (s2 > 5) {
					break;
				}
				G2minstore.at(s2) = G2data.at(e2).second;
			}

			if (G2data.at(e2).first < set_radian2) {
				if (G2maxstore.at(s2) < G2data.at(e2).second) {
					G2maxstore.at(s2) = G2data.at(e2).second;
				}
				
				if (G2minstore.at(s2) > G2data.at(e2).second) {
					G2minstore.at(s2) = G2data.at(e2).second;
					//printf("in\n");
				}
			}
		}
		
		for (int e3 = 0; e3 < u3; e3++) {
			if (e3 == 0) {
				G3minstore.at(s3) = G3data.at(e3).second;
			}

			if (G3data.at(e3).first > set_radian3) {
				set_radian3 += 1;
				s3++;
				if (s3 > 5) {
					break;
				}
				G3minstore.at(s3) = G3data.at(e3).second;
			}

			if (G3data.at(e3).first < set_radian3) {
				if (G3maxstore.at(s3) < G3data.at(e3).second) {
					G3maxstore.at(s3) = G3data.at(e3).second;
				}
				
				if (G3minstore.at(s3) > G3data.at(e3).second) {
					G3minstore.at(s3) = G3data.at(e3).second;
				}
			}
		}
		
		sort(G1maxstore.rbegin(), G1maxstore.rend());
		sort(G2maxstore.rbegin(), G2maxstore.rend());
		sort(G3maxstore.rbegin(), G3maxstore.rend());
		sort(G1minstore.begin(), G1minstore.end());
		sort(G2minstore.begin(), G2minstore.end());
		sort(G3minstore.begin(), G3minstore.end());
		
		//printf("%f,%f\n", G1maxstore.at(0), G1minstore.at((double)6 - s1));
		//printf("%f,%f\n", G2maxstore.at(0), G2minstore.at((double)6 - s2));
		//printf("%f,%f\n", G3maxstore.at(0), G3minstore.at((double)6 - s3));

		asp1.at(r) = G1maxstore.at(0) / G1minstore.at((double)6-s1);
		asp2.at(r) = G2maxstore.at(0) / G2minstore.at((double)6-s2);
		asp3.at(r) = G3maxstore.at(0) / G3minstore.at((double)6-s3);
		printf("red:%f green:%f blue:%f\n", asp1.at(r), asp2.at(r), asp3.at(r));
		imshow("a", img);
		waitKey(0);
	}

	double base_asp1 = 0;
	double base_asp2 = 0;
	double base_asp3 = 0;
	int index1 = 0;
	int index2 = 0;
	int index3 = 0;

	for (int z = 0; z < 5; z++) {
		if (asp1.at(z) > base_asp1) {
			base_asp1 = asp1.at(z);
			index1 = z;
		}
		if (asp2.at(z) > base_asp2) {
			base_asp2 = asp2.at(z);
			index2 = z;
		}
		if (asp3.at(z) > base_asp3) {
			base_asp3 = asp3.at(z);
			index3 = z;
		}
	}

	line(img, edge1, G1.at(index1), Scalar(0, 0, 200), 3, 4);
	line(img, edge2, G2.at(index2), Scalar(0, 200, 0), 3, 4);
	line(img, edge3, G3.at(index3), Scalar(200, 0, 0), 3, 4);

	Point v1 = center(edge2,  G2.at(index2), edge1, G1.at(index1));
	Point v2 = center(edge3,  G3.at(index3), edge2, G2.at(index2));
	Point v3 = center(edge1,  G1.at(index1), edge3, G3.at(index3));
	circle(img, v1, 5, Scalar(0, 255, 255), -1, 5);
	circle(img, v2, 5, Scalar(255, 255, 0), -1, 5);
	circle(img, v3, 5, Scalar(255, 0, 255), -1, 5);
	Point v = Point(0, 0);
	v.x = (v1.x + v2.x + v3.x) / 3;
	v.y = (v1.y + v2.y + v3.y) / 3;
	circle(img, v, 5, Scalar(155, 155, 155), -1, 5);
	imshow("a", img);
	waitKey(0);

	Point A = Point(0,0);
	Point B = Point(0,0);
	double cos = 0, theta = 0;

	A.x = edge2.x - v.x;
	A.y = edge2.y - v.y;
	B.x = edge3.x - v.x;
	B.y = edge3.y - v.y;

	cos = ((double)A.x * (double)B.x + (double)A.y * (double)B.y) / (sqrt(pow(A.x, 2) + pow(A.y, 2)) * sqrt(pow(B.x, 2) + pow(B.y, 2)));
	theta = acos(cos) * (double)180 / PI;
	printf("%f\n", theta);
	waitKey(0);
	return 0;
}
