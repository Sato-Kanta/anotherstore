#define STRICT
#define NOMINMAX
#include <opencv2/core/utility.hpp>
#include <opencv2/video/tracking.hpp>
#include <opencv2/videoio.hpp> // videoioのヘッダーをインクルード
#include <opencv2/highgui.hpp> // highguiのヘッダーをインクルード
#include <opencv2/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc/imgproc_c.h>
#include <opencv2/highgui/highgui_c.h>
#include<opencv2/objdetect/detection_based_tracker.hpp>
#include <iostream>
#include<string>
#include<vector>
#include<stdio.h>
#include<math.h>
#include "resource.h"
#include<process.h>
#include <windows.h>
#include <windowsx.h>
#include <tchar.h>
#include "cserial.h"
#include<opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/video.hpp>
#include<cstring>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/tracking.hpp>
#include <numeric>      // std::iota
#include <algorithm>    // std::sort, std::stable_sort
#include <opencv2/video/background_segm.hpp>
#include <functional>
#include<stdlib.h>　//WM＿TIMERの精度が心配な時
#include<time.h>　　//WM＿TIMERの精度が心配な時

//CSerialインスタンスの宣言
CSerial* cserial;
//ダイアログ関数プロトタイプの宣言
//BOOL CALLBACK DlgWndProc(HWND, UINT, WPARAM, LPARAM);
BOOL CALLBACK DlgWndProc(HWND, UINT, WPARAM, LPARAM);
//WinAPI関連
HWND hWnd;
MSG msg;

//カメラ関連

unsigned int __stdcall camera(PVOID pv);
HANDLE threadHandle = NULL;
//--------------------------------------------
// Name:WinMain()
// Desc:アプリケーションのエントリー関数
//--------------------------------------------

double PI = (double)355 / (double)113;
static int operation_status = 5;
int STATUS = 0, state = 0; //モード変数
int Endflag = 0;
int send_count = 0;
int up_flag = 0, down_flag = 0, right_flag = 0, left_flag = 0, in_flag = 0, out_flag = 0, stop_flag = 0;
static int encoder_pitch_data = 0;
static int encoder_yaw_data = 0;
static int encoder_zoom_data = 0;
int edit_data[10];	               //SEND_DATA用
//pic-windows
enum eCODE {
	OFFSET, RESET,
	START, STOP,
	R_UP, R_DOWN,
	L_UP, L_DOWN,
	SPEED_UP, SPEED_DOWN,
	SEND_DATA, DATA_CHECK,
	NEUTRAL,
	REMOVE_SCOPE, UP, DOWN, LEFT, RIGHT, ZOOM_IN, ZOOM_OUT, BREAK,
	LEFTIN, LEFTOUT, RIGHTIN, RIGHTOUT, UPIN, UPOUT, DOWNIN, DOWNOUT
};

//--------------------------------------------
// Name:DlgWndProc()
// Desc:ダイアログ用ウィンドウプロシージャ
//--------------------------------------------
BOOL CALLBACK DlgWndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	TCHAR szstr[256] = _T("");
	DWORD dwThread;
	static int roll_data, yaw_data, pitch_data;
	static short int s_flag = 0;// ss_flag = 0;
	static bool file_write = 0;		//ファイルに記録するかどうか
	static int file_flag = 0, write_flag = 0;
	SYSTEMTIME systime;//時間記録用

	char FileName[127] = { "FILE_AD" };//ファイルの名前用の文字列

	//変数の宣言
	//シリアル通信用

	int check_data[2] = { 0,0 };			   //通信確認用

	//AD7150設定取得用
	unsigned static int ch2_data = 0, ch2_critical = 10000;	//ch2_data:筋収縮センサの値 ch2_critical:閾値
	unsigned static int ch1_data = 0, ch1_critical = 10000;	//ch1_data:加速度センサの値 ch1_critical:閾値
	static int VR = 0;//可変抵抗用

	static int speed_data = 0;//速度
	static int senser_threshold_per = 0;//閾値

	//グラフ表示関係
	static int g_scale = 1;  //data*g_scalse/12 表示調整
	//通信・ファイル出力操作用
	static int flags = 1;

	//カウンタ
	unsigned static int time_count = 0, Off_count = 0;

	//位置データ
	int i;

	static int neutral_count = 0;

	switch (iMsg)
	{
	case WM_INITDIALOG:
		//ダイアログボックスが生成されたとき
		Button_SetCheck(GetDlgItem(hWnd, IDC_BUTTON1), BST_CHECKED);
		cserial = new CSerial; 							// Cserialクラスを取得
		cserial->MakeBuffer(3, 10); 					// 送信用データを1byte、受信用データを4byte用意する。
		if (cserial->GetComNum(NULL) == 0) {
			MessageBox(hWnd, "接続を確認できません", "error", MB_OK);
			PostQuitMessage(0);
			//CSerialクラスの終了処理
			delete cserial;
			return 1;
		}
		//cserial->SetFindSerialPortName(0);
		cserial->SetSerialPortName("COM7");
		cserial->OpenSerialPort(); 					// シリアルポートをオープンする。
		cserial->SetSerialPort(115200, 1024, 1024);	// ボーレイトの設定
		cserial->SerialPortBufferClear(); 				// シリアルポートの送受信FIFOメモリをクリアする。
		return TRUE;
	case WM_COMMAND:

		SendMessage(GetDlgItem(hWnd, IDC_EDIT1), WM_SETFONT, (WPARAM)CreateFont(50, 0, 0, 0, FW_REGULAR, FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH, "ＭＳ Ｐゴシック"), MAKELPARAM(TRUE, 0));
		switch (LOWORD(wParam))
		{
		case IDC_BUTTON1:
			if (flags) {
				//SetWindowText(GetDlgItem(hWnd, IDC_EDIT1), _T("画面表示"));
				SetTimer(hWnd, 1, 1, NULL);//通信系
				//SetTimer(hWnd, 2, 1, NULL);//表示系
				if (threadHandle != NULL) break;
				//スレッド起動
				threadHandle = (HANDLE)_beginthreadex(NULL, 0, camera, NULL, 0, (unsigned int*)&dwThread);
				flags = 0;

			}
			else {
				KillTimer(hWnd, 1);
				KillTimer(hWnd, 2);
				flags = 1;
			}
			break;
		case IDC_BUTTON2:
			SetWindowText(GetDlgItem(hWnd, IDC_EDIT1), _T("確認"));
			STATUS = 0;
			send_count = 2;
			break;

		case IDC_BUTTON8:
			STATUS = 1;
			send_count = 1;
			break;
		}
		return TRUE;
	case WM_TIMER:
		switch (LOWORD(wParam)) {
		case 1:

			/*========================receive data========================================================-*/
			cserial->m_senddata[0] = (unsigned char)SEND_DATA;				//確認用データを代入する。
			cserial->SerialPortBufferClear();
			cserial->SendSerialData(1);										//確認用データを送信する。
			cserial->ReceiveSerialData(10);//0815
			//とりあえず28byte分のデータを受け取る
			for (int i = 0; i < 10; i++) {
				edit_data[i] = cserial->m_receivedata[i];
			}
			if ((edit_data[0] == DATA_CHECK) && (edit_data[9] == DATA_CHECK)) {//0と27番目のデータは確認用

				edit_data[2] <<= 8;			//19,20byte目はピッチエンコーダの値
				edit_data[1] |= edit_data[2];
				encoder_pitch_data = edit_data[1];

				edit_data[4] <<= 8;			//21,22byte目はヨーエンコーダの値
				edit_data[3] |= edit_data[4];
				encoder_yaw_data = edit_data[3];

				edit_data[6] <<= 8;			//23,24byte目はズームエンコーダの値
				edit_data[5] |= edit_data[6];
				encoder_zoom_data = edit_data[5];

				edit_data[8] <<= 8;            //25,26byte目は運用状態
				edit_data[7] |= edit_data[8];
				operation_status = edit_data[7];

				cserial->SerialPortBufferClear();
			}


			/*===================================seda data==================================================*/
			switch (send_count) {
			case 1:	//マスターにSTRATという値を送る
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT1), _T("START"));
				cserial->m_senddata[0] = (unsigned char)START;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				operation_status = 0;
				send_count = 0;
				break;

			case 2://マスターにSTOPという値を送る
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT1), _T("STOP"));
				cserial->m_senddata[0] = (unsigned char)STOP;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 19://マスターにNEUTRALという値を送る
				cserial->m_senddata[0] = (unsigned char)NEUTRAL;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 20://マスターにREMOVE_SCOPEという値を送る
				cserial->m_senddata[0] = (unsigned char)REMOVE_SCOPE;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 3:

				cserial->m_senddata[0] = (unsigned char)LEFT;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 4:
				cserial->m_senddata[0] = (unsigned char)RIGHT;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 5:
				cserial->m_senddata[0] = (unsigned char)UP;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 6:
				cserial->m_senddata[0] = (unsigned char)DOWN;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 7:
				cserial->m_senddata[0] = (unsigned char)ZOOM_IN;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 8:
				cserial->m_senddata[0] = (unsigned char)ZOOM_OUT;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 9:
				cserial->m_senddata[0] = (unsigned char)BREAK;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 10:
				cserial->m_senddata[0] = (unsigned char)LEFTIN;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 11:
				cserial->m_senddata[0] = (unsigned char)LEFTOUT;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 12:
				cserial->m_senddata[0] = (unsigned char)RIGHTIN;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 13:
				cserial->m_senddata[0] = (unsigned char)RIGHTOUT;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 14:
				cserial->m_senddata[0] = (unsigned char)UPIN;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 15:
				cserial->m_senddata[0] = (unsigned char)UPOUT;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 16:
				cserial->m_senddata[0] = (unsigned char)DOWNIN;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			case 17:
				cserial->m_senddata[0] = (unsigned char)DOWNOUT;
				cserial->SerialPortBufferClear();
				cserial->SendSerialData(1);
				send_count = 0;
				break;

			}
			return 1;

		case 2:
			SendMessage(GetDlgItem(hWnd, IDC_EDIT2), WM_SETFONT, (WPARAM)CreateFont(50, 0, 0, 0, FW_REGULAR, FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH, "ＭＳ Ｐゴシック"), MAKELPARAM(TRUE, 0));
			SetDlgItemInt(hWnd, IDC_encoder_pitch, encoder_pitch_data, 1);//pitch location
			SetDlgItemInt(hWnd, IDC_encoder_yaw, encoder_yaw_data, 1);//yow location
			SetDlgItemInt(hWnd, IDC_encoder_zoom, encoder_zoom_data, 1);//zoom location

			//状態表示　初期値は3
			switch (operation_status) {
			case 0:
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("BREAK"));
				break;
			case 1:
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("PITCH"));
				break;
			case 2:
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("YAW"));
				break;
			case 3:
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("ZOOM IN"));
				break;
			case 4:
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("ZOOM OUT"));
				break;
			case 5:
				SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("now config"));
				break;
			}
			return 1;
		}
		break;
		// ×ボタンをクリックしたときの処理
	case WM_CLOSE:
		//ダイアログを破棄
		DestroyWindow(hWnd);
		//fclose(fp0);//ファイルを閉じる
		return 1;

		//終了(ウィンドウを閉じた後の)処理
	case WM_DESTROY:
		PostQuitMessage(0);
		//CSerialクラスの終了処理
		delete cserial;
		return 1;

	default:
		return FALSE;
	}
}

using namespace cv;
using namespace std;

int xb = 0, yb = 0;
int ct = 0;
int st = 0;

#ifdef _DEBUG
#pragma comment(lib, "opencv_world452d.lib")
#else
#pragma comment(lib, "opencv_world452.lib")
#endif

Point minPoint(vector<Point> contours) {
	double minx = contours.at(0).x;
	double miny = contours.at(0).y;
	for (int i = 1; i < contours.size(); i++) {
		if (minx > contours.at(i).x) {
			minx = contours.at(i).x;
		}
		if (miny > contours.at(i).y) {
			miny = contours.at(i).y;
		}
	}
	return Point(minx, miny);
}
//最大座標を求める
Point maxPoint(vector<Point> contours) {
	double maxx = contours.at(0).x;
	double maxy = contours.at(0).y;
	for (int i = 1; i < contours.size(); i++) {
		if (maxx < contours.at(i).x) {
			maxx = contours.at(i).x;
		}
		if (maxy < contours.at(i).y) {
			maxy = contours.at(i).y;
		}
	}
	return Point(maxx, maxy);
}

Mat mask1(Mat img) {
	Mat mask, mask2, bgf1;
	int White = 0;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(15, 15));
	//inRange(img, Scalar(28, 64, 0), Scalar(77, 255, 255), mask);
	inRange(img, Scalar(25, 64, 0), Scalar(40, 255, 255), mask);
	//inRange(img, Scalar(30, 64, 0), Scalar(45, 255, 255), mask);
	morphologyEx(mask, mask2, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask2, mask2, MORPH_OPEN, kernel);
		medianBlur(mask2, mask2, 5);
	}
	threshold(mask2, bgf1, 120, 255, THRESH_BINARY);
	return bgf1;
}

Mat mask2(Mat img) {
	Mat mask3, mask4, bgf2;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(15, 15));
	inRange(img, Scalar(157, 64, 0), Scalar(182, 255, 255), mask3);
	//inRange(img, Scalar(125, 64, 0), Scalar(150, 255, 255), mask3);
	morphologyEx(mask3, mask4, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask4, mask4, MORPH_OPEN, kernel);
		medianBlur(mask4, mask4, 5);
	}
	threshold(mask4, bgf2, 120, 255, THRESH_BINARY);
	return bgf2;
}

Mat mask3(Mat img) {
	Mat mask, mask2, bgf1;
	int White = 0;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(13, 13));

	//inRange(img, Scalar(28, 64, 0), Scalar(77, 255, 255), mask);
	inRange(img, Scalar(0, 64, 0), Scalar(24, 255, 255), mask);
	morphologyEx(mask, mask2, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask2, mask2, MORPH_OPEN, kernel);
		medianBlur(mask2, mask2, 5);
	}
	threshold(mask2, bgf1, 120, 255, THRESH_BINARY);
	return bgf1;
}

Mat mask4(Mat img) {
	Mat mask, mask2, bgf1;
	int White = 0;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(15, 15));

	//inRange(img, Scalar(28, 64, 0), Scalar(77, 255, 255), mask);
	inRange(img, Scalar(133, 64, 0), Scalar(166, 255, 255), mask);
	//inRange(img, Scalar(131, 64, 0), Scalar(156, 255, 255), mask);
	morphologyEx(mask, mask2, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask2, mask2, MORPH_OPEN, kernel);
		medianBlur(mask2, mask2, 5);
	}
	threshold(mask2, bgf1, 120, 255, THRESH_BINARY);
	return bgf1;
}

Mat Qmask1(Mat img) {
	Mat mask, mask2, bgf1;
	int White = 0;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(15, 15));
	inRange(img, Scalar(32, 64, 0), Scalar(47, 255, 255), mask);
	morphologyEx(mask, mask2, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask2, mask2, MORPH_OPEN, kernel);
		medianBlur(mask2, mask2, 5);
	}
	threshold(mask2, bgf1, 120, 255, THRESH_BINARY);
	return bgf1;
}

Mat Qmask2(Mat img) {
	Mat mask3, mask4, bgf2;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(13, 13));
	inRange(img, Scalar(152, 64, 0), Scalar(177, 255, 255), mask3);
	morphologyEx(mask3, mask4, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask4, mask4, MORPH_OPEN, kernel);
		medianBlur(mask4, mask4, 5);
	}
	threshold(mask4, bgf2, 120, 255, THRESH_BINARY);
	return bgf2;
}

Mat Qmask3(Mat img) {
	Mat mask, mask2, bgf1;
	int White = 0;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(15, 15));
	inRange(img, Scalar(5, 64, 0), Scalar(31, 255, 255), mask);
	morphologyEx(mask, mask2, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask2, mask2, MORPH_OPEN, kernel);
		medianBlur(mask2, mask2, 5);
	}
	threshold(mask2, bgf1, 120, 255, THRESH_BINARY);
	return bgf1;
}

Mat Qmask4(Mat img) {
	Mat mask, mask2, bgf1;
	int White = 0;
	Mat kernel = getStructuringElement(MORPH_RECT, Size(13, 13));
	inRange(img, Scalar(128, 64, 0), Scalar(161, 255, 255), mask);
	morphologyEx(mask, mask2, MORPH_OPEN, kernel);
	for (int i = 0; i < 3; i++) {
		morphologyEx(mask2, mask2, MORPH_OPEN, kernel);
		medianBlur(mask2, mask2, 5);
	}
	threshold(mask2, bgf1, 120, 255, THRESH_BINARY);
	return bgf1;
}

Mat Optical(Mat img1, Mat img2) {
	Mat flow(img1.size(), CV_32FC2);
	calcOpticalFlowFarneback(img1, img2, flow, 0.5, 3, 17, 3, 5, 1.1, 0);
	Mat flow_copy;
	//GaussianBlur(flow, flow_copy, cv::Size(3, 3), 0, 0);
	// visualization
	Mat flow_parts[2];
	split(flow, flow_parts);
	//split(flow_copy, flow_parts);

	//split(flow, flow_parts);
	Mat magnitude, angle, magn_norm;
	cartToPolar(flow_parts[0], flow_parts[1], magnitude, angle, true);
	normalize(magnitude, magn_norm, 0.0f, 1.0f, NORM_MINMAX);
	//imshow("an", magn_norm);

	angle *= ((1.f / 360.f) * (180.f / 255.f));
	//build hsv image
	Mat _hsv[3], hsv, hsv8, bgr;
	_hsv[0] = angle;
	_hsv[1] = Mat::ones(angle.size(), CV_32F);
	_hsv[2] = magn_norm;

	Mat h1, h2, h12;
	threshold(_hsv[0], h1, 60, 360, THRESH_BINARY);

	threshold(_hsv[0], h2, 120, 360, THRESH_BINARY);
	bitwise_or(h1, h2, h12);
	merge(_hsv, 3, hsv);
	hsv.convertTo(hsv8, CV_8U, 255.0);

	return hsv8;
}

vector<vector<Point>> contours(Mat img) {
	vector< vector<Point> > contours;
	vector< vector<Point> > contours_subset;
	vector<Vec4i> hierarchy;
	findContours(img, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);
	for (auto contour = contours.begin(); contour != contours.end(); contour++) {
		for (int i = 0; i < contours.size(); i++) {
			double area1 = 0;
			area1 = contourArea(contours.at(i));
			if (area1 > 5 && area1 < 20) {
				contours_subset.push_back(contours.at(i));
			}
		}
	}
	return contours_subset;
}

Point center(Point max, Point min, Point MAX, Point MIN) {
	Point v;
	int k = 0;
	double s1 = 0, s2 = 0;
	int P1X = MIN.x;
	int P1Y = MIN.y;
	int P2Y = min.y;
	int P2X = min.x;
	int P3X = MAX.x;
	int P3Y = MAX.y;
	int P4Y = max.y;
	int P4X = max.x;

	s1 = ((P4X - P2X) * (P1Y - P2Y) - (P4Y - P2Y) * (P1X - P2X)) / 2;
	s2 = ((P4X - P2X) * (P2Y - P3Y) - (P4Y - P2Y) * (P2X - P3X)) / 2;

	v = Point(0, 0);
	v.x = P1X + ((double)P3X - (double)P1X) * s1 / (s1 + s2);
	v.y = P1Y + ((double)P3Y - (double)P1Y) * s1 / (s1 + s2);

	return v;
}

void templateMatch(Mat src, Mat tmp, Mat frame) {

	int sumx = 0, sumy = 0;
	const int __TARGET_NUM__ = 30;
	Mat output, dst;
	//dst = src.clone();
	dst = frame.clone();
	//テンプレートマッチング
	matchTemplate(src, tmp, output, TM_CCOEFF);
	//0~1の値に標準化
	normalize(output, output, 0, 1, NORM_MINMAX, -1, Mat());
	//2次元から1次元へ変換
	Mat one_row = output.reshape(1, 1);

	vector<float> one_row_vec;
	vector<float> one_row_index;

	//cv::Mat -> std::vector に変換
	one_row_vec.assign(one_row.begin<float>(), one_row.end<float>());
	vector<int> index(one_row_vec.size());

	//ソートインデックス配列用に整数列を作成する(0,1,2,3,4,5......)
	iota(index.begin(), index.end(), 0);

	//ソートをかける
	sort(index.begin(), index.end(), [&](int a, int b) {return one_row_vec[a] > one_row_vec[b]; });

	for (int i = 0; i < __TARGET_NUM__; i++) {
		//std::cout << index[i] << ":" << one_row_vec[index[i]] << std::endl;
		if (one_row_vec[index[i]] > 0.999) {
			ct++;
			// 1次元から2次元に変換 
			int x = index[i] % output.cols;
			int y = index[i] / output.cols;

			Rect roi_rect = Rect(x, y, tmp.cols, tmp.rows);
			rectangle(dst, roi_rect, Scalar(0, 255, 255), 3);
			xb = x;
			yb = y;
		}
	}
}

Mat Bit_Wise2(Mat img1, Mat img2) {
	Mat img1_gry, img2_gry, img_gry;
	cvtColor(img1, img1_gry, COLOR_BGR2GRAY);
	cvtColor(img2, img2_gry, COLOR_BGR2GRAY);

	absdiff(img1_gry, img2_gry, img_gry);


	return img_gry;
}

int MatArea(Mat canny) {
	vector<int> Area(1000);
	dilate(canny, canny, Mat(), Point(-1, -1), 3);

	vector<vector<Point> > contours;
	findContours(canny, contours, RETR_TREE, CHAIN_APPROX_SIMPLE);

	Mat drawing = Mat::zeros(canny.size(), CV_8UC3);
	RNG rng(12345);

	for (size_t i = 0; i < contours.size(); i++) {
		Scalar color = cv::Scalar(rng.uniform(0, 256), rng.uniform(0, 256), rng.uniform(0, 256));
		drawContours(drawing, contours, (int)i, color);
		Area.at(i) = contourArea(contours[i]);
	}

	sort(Area.begin(), Area.end(), greater<int>());

	return Area.at(0);
}

int Match(Mat src, Mat tmp) {

	int sumx = 0, sumy = 0;
	int match = 0;
	const int __TARGET_NUM__ = 30;
	Mat output;
	//テンプレートマッチング
	matchTemplate(src, tmp, output, TM_CCOEFF);
	//0~1の値に標準化
	normalize(output, output, 0, 1, NORM_MINMAX, -1, Mat());
	//2次元から1次元へ変換
	Mat one_row = output.reshape(1, 1);

	vector<float> one_row_vec;
	vector<float> one_row_index;

	//cv::Mat -> std::vector に変換
	one_row_vec.assign(one_row.begin<float>(), one_row.end<float>());
	vector<int> index(one_row_vec.size());

	//ソートインデックス配列用に整数列を作成する(0,1,2,3,4,5......)
	iota(index.begin(), index.end(), 0);

	//ソートをかける
	sort(index.begin(), index.end(), [&](int a, int b) {return one_row_vec[a] > one_row_vec[b]; });

	for (int i = 0; i < __TARGET_NUM__; i++) {
		//std::cout << index[i] << ":" << one_row_vec[index[i]] << std::endl;
		if (one_row_vec[index[i]] > 0.9) {
			match = 1;
		}
		else {
			match = 0;
		}
	}
	return match;
}

int maxPointsearch(vector<KeyPoint> contours) {
	double maxy = contours.at(0).pt.y;
	int index = 0;
	for (int i = 1; i < contours.size(); i++) {
		if (maxy < contours.at(i).pt.y) {
			maxy = contours.at(i).pt.y;
			index = i;
		}
	}
	return index;
}

int minPointsearch(vector<KeyPoint> contours) {
	double miny = contours.at(0).pt.y;
	int index = 0;
	for (int i = 1; i < contours.size(); i++) {
		if (miny > contours.at(i).pt.y) {
			miny = contours.at(i).pt.y;
			index = i;
		}
	}
	return index;
}

Point minPoint(vector<KeyPoint> contours) {
	double minx = contours.at(0).pt.x;
	int index = 0;
	for (int i = 1; i < contours.size(); i++) {
		if (minx > contours.at(i).pt.x) {
			minx = contours.at(i).pt.x;
			index = i;
		}
	}
	return Point(contours.at(index).pt.x, contours.at(index).pt.y);
}

vector<Point> AKAZEcreate(Mat gryimg, Mat backimg, Rect roi) {
	medianBlur(gryimg, gryimg, 3);
	Mat edge, createimg;
	createimg = backimg;
	Canny(gryimg, edge, 50, 100, 3, true);
	dilate(edge, edge, Mat(), Point(-1, -1), 5);
	bitwise_and(backimg(roi), backimg(roi), createimg, edge);
	auto algorithm = AKAZE::create();
	vector<KeyPoint> keypoint1;
	vector<Point>G(3);
	algorithm->detect(createimg, keypoint1);
	int b = keypoint1.size();
	if (b == 0) {
		//exit(1);
	}
	//vector<int> coordinate1_y(a);
	Point Gx = Point(0, 0);
	Point Gy = Point(0, 0);
	Point Gz = Point(0, 0);
	int minindex = minPointsearch(keypoint1);
	int maxindex = maxPointsearch(keypoint1);
	Gx = Point(keypoint1.at(minindex).pt.x, keypoint1.at(minindex).pt.y);
	Gy = Point(keypoint1.at(maxindex).pt.x, keypoint1.at(maxindex).pt.y);
	Gz = minPoint(keypoint1);
	G.at(0) = Gx;
	G.at(1) = Gy;
	G.at(2) = Gz;

	return G;
}

pair<Point, Point> KeyLeft(vector<KeyPoint> keypoint) {
	Point upG = Point(0, 0);
	Point downG = Point(0, 0);
	vector<pair<int, int>>countdx(800);
	Mat neoblack = Mat::zeros(500, 500, CV_8UC3);

	int sumx = 0, sumy = 0;
	int avrx = 0, avry = 0;
	int aq = 0, bq = 0, cq = 0, dq = 0, iq = 0;
	for (int i = 0; i < keypoint.size(); i++) {
		countdx.at(i).first = (int)keypoint.at(i).pt.x;
		countdx.at(i).second = (int)keypoint.at(i).pt.y;
		aq++;
	}
	sort(countdx.rbegin(), countdx.rend());
	int green = 0;
	for (green = 0; green < aq * 2 / 3; green++) {
		if (iq % 5 == 0) {
			sumx += countdx.at(green).first;
			sumy += countdx.at(green).second;
			dq++;
		}
		iq++;
	}
	avrx = sumx / dq;
	avry = sumy / dq;
	vector<pair<int, int>> up(500);
	vector<pair<int, int>> down(500);
	for (int i = 0; i < keypoint.size(); i++) {
		if (keypoint.at(i).pt.x > avrx) {
			if (keypoint.at(i).pt.y > avry) {
				up.at(cq).first = (int)keypoint.at(i).pt.x;
				up.at(cq).second = (int)keypoint.at(i).pt.y;
				cq++;
				circle(neoblack, keypoint.at(i).pt, 2, Scalar(0, 255, 255), 2, 5);

			}
			else {
				down.at(bq).first = keypoint.at(i).pt.x;
				down.at(bq).second = keypoint.at(i).pt.y;
				bq++;
				circle(neoblack, keypoint.at(i).pt, 2, Scalar(255, 255, 0), 2, 5);

			}
		}
	}
	//imshow("blacky2", neoblack);

	sort(up.rbegin(), up.rend());
	sort(down.rbegin(), down.rend());
	int counter = 0;
	int counter2 = 0;
	int sumupx = 0, sumupy = 0, sumdownx = 0, sumdowny = 0;
	int avrupx = 0, avrupy = 0, avrdownx = 0, avrdowny = 0;
	for (int blue = 0; blue < up.size(); blue++) {
		//printf("%d:\n", up.at(blue).first);
		if (up.at(blue).first != 0 && up.at(blue).second != 0) {
			sumupx += up.at(blue).first;
			sumupy += up.at(blue).second;
			counter++;
			if (counter == 9) {
				avrupx = sumupx / counter;
				avrupy = sumupy / counter;
				upG = Point(avrupx, avrupy);
				//circle(black, upG, 5, Scalar(0, 55, 55), 2, 5);
			}
		}
	}

	if (counter > 0 && counter < 9) {
		avrupx = sumupx / counter;
		avrupy = sumupy / counter;
		upG = Point(avrupx, avrupy);
	}

	for (int red = 0; red < down.size(); red++) {
		if (down.at(red).first != 0 && down.at(red).second != 0) {
			sumdownx += down.at(red).first;
			sumdowny += down.at(red).second;
			counter2++;
			if (counter2 == 9) {
				avrdownx = sumdownx / counter2;
				avrdowny = sumdowny / counter2;
				downG = Point(avrdownx, avrdowny);
				//circle(black, downG, 5, Scalar(55, 55, 0), 2, 5);
			}
		}
	}

	if (counter2 > 0 && counter2 < 9) {
		avrdownx = sumdownx / counter2;
		avrdowny = sumdowny / counter2;
		downG = Point(avrdownx, avrdowny);
	}

	return { upG,downG };
}

pair<Point, Point> KeyRight(vector<KeyPoint> keypoint) {
	Point upG = Point(0, 0);
	Point downG = Point(0, 0);
	vector<pair<int, int>>countdx(800);

	int sumx = 0, sumy = 0;
	int avrx = 0, avry = 0;
	int aq = 0, bq = 0, cq = 0, dq = 0, iq = 0;
	for (int i = 0; i < keypoint.size(); i++) {
		countdx.at(i).first = (int)keypoint.at(i).pt.x;
		countdx.at(i).second = (int)keypoint.at(i).pt.y;
		aq++;
	}
	//countdx.erase(remove(begin(countdx), end(countdx), 0), cend(countdx));
	sort(countdx.begin(), countdx.end());
	int green = 0;
	for (green = 800 - aq; green < 800; green++) {
		if (iq % 5 == 0) {
			sumx += countdx.at(green).first;
			sumy += countdx.at(green).second;
			dq++;
		}
		iq++;
	}
	avrx = sumx / dq;
	avry = sumy / dq;
	vector<pair<int, int>> up(200);
	vector<pair<int, int>> down(200);
	for (int i = 0; i < keypoint.size(); i++) {
		if (keypoint.at(i).pt.x < avrx) {
			if (keypoint.at(i).pt.y > avry) {
				up.at(cq).first = (int)keypoint.at(i).pt.x;
				up.at(cq).second = (int)keypoint.at(i).pt.y;
				cq++;
			}
			else {
				down.at(bq).first = keypoint.at(i).pt.x;
				down.at(bq).second = keypoint.at(i).pt.y;
				bq++;
			}
		}
	}
	int sumupx = 0, sumupy = 0, sumdownx = 0, sumdowny = 0;
	int avrupx = 0, avrupy = 0, avrdownx = 0, avrdowny = 0;
	sort(up.begin(), up.end());
	sort(down.begin(), down.end());

	//up.erase(remove(up.begin(), up.end(), 0), up.end());
	//down.erase(remove(down.begin(), down.end(), 0), down.end());
	int counter = 0;
	int counter2 = 0;

	for (int blue = 0; blue < up.size(); blue++) {
		//printf("%d:\n", up.at(blue).first);
		if (up.at(blue).first != 0 && up.at(blue).second != 0) {
			sumupx += up.at(blue).first;
			sumupy += up.at(blue).second;
			counter++;
			if (counter == 9) {
				avrupx = sumupx / counter;
				avrupy = sumupy / counter;
				upG = Point(avrupx, avrupy);
				//circle(black, upG, 5, Scalar(0, 55, 55), 2, 5);
			}
		}
	}

	if (counter > 0 && counter < 9) {
		avrupx = sumupx / counter;
		avrupy = sumupy / counter;
		upG = Point(avrupx, avrupy);
	}

	for (int red = 0; red < down.size(); red++) {
		if (down.at(red).first != 0 && down.at(red).second != 0) {
			sumdownx += down.at(red).first;
			sumdowny += down.at(red).second;
			counter2++;
			if (counter2 == 9) {
				avrdownx = sumdownx / counter2;
				avrdowny = sumdowny / counter2;
				downG = Point(avrdownx, avrdowny);
				//circle(black, downG, 5, Scalar(55, 55, 0), 2, 5);
			}
		}
	}

	if (counter2 > 0 && counter2 < 9) {
		avrdownx = sumdownx / counter2;
		avrdowny = sumdowny / counter2;
		downG = Point(avrdownx, avrdowny);
	}

	return { upG,downG };
}

pair<Point, double> three_seg(vector<KeyPoint> keypoint) {
	Point v = Point(0, 0);
	double theta = 0;
	vector<int> m1(5);
	vector<int> m2(5);
	vector<int> m3(5);
	int a = 0;
	double sumx = 0, sumy = 0;
	Point G = Point(0, 0);
	for (int i = 0; i < keypoint.size(); i++) {
		//circle(img, keypoint.at(i).pt, 1, Scalar(0, 255, 255), 2, 5);
		sumx += (double)keypoint.at(i).pt.x;
		sumy += (double)keypoint.at(i).pt.y;
		a++;
	}
	G.x = sumx / (double)a;
	G.y = sumy / (double)a;
	//circle(img, G, 1, Scalar(55, 55, 155), 3, 5);
	vector<pair<double, double>> data(a);//radian,distance
	for (int j = 0; j < a; j++) {
		data.at(j).second = sqrt(pow(G.x - (double)keypoint.at(j).pt.x, 2) + pow(G.y - (double)keypoint.at(j).pt.y, 2));
		data.at(j).first = atan2(G.y - (double)keypoint.at(j).pt.y, G.x - (double)keypoint.at(j).pt.x);
		//printf("%f,%f\n", data.at(j).first, data.at(j).second);
	}

	sort(data.begin(), data.end());
	//vector<pair<double, double>> store(6);//distance,radian
	vector<pair<double, double>> store(12);//distance,radian
	vector<double> dstore(12);//distance,radian
	Point edge1 = Point(0, 0);
	Point edge2 = Point(0, 0);
	Point edge3 = Point(0, 0);
	Point edge_tmp = Point(0, 0);
	//double set_radian = -(double)3894 / (double)1356;//2.75
	double set_radian = -(double)1770 / (double)678;//2.5
	double base_radian = -(double)354 / (double)113;
	int s = 0;
	//ラジアン6等分&最大値取得
	for (int k = 0; k < a; k++) {
		//printf("%f,%f\n", data.at(k).first, data.at(k).second);
		if (data.at(k).first > set_radian) {
			//set_radian += (double)354 / (double)1356;//0.25
			//base_radian += (double)354 / (double)1356;
			set_radian += (double)354 / (double)678;//0.5
			base_radian += (double)354 / (double)678;
			s++;
			if (s > 11) {
				break;
			}
		}

		if (data.at(k).first < set_radian && data.at(k).first > base_radian) {
			dstore.at(s) += data.at(k).second;
			if (store.at(s).first < data.at(k).second) {
				store.at(s).first = data.at(k).second;
				store.at(s).second = data.at(k).first;
				//circle(img, keypoint.at(k).pt, 1, Scalar(0, 255, 255), 2, 5);
			}
		}
	}

	vector<int> xx(4);
	int marcury = 1;
	xx.at(0) = 0;
	for (int w = 1; w < 11; w++) {
		if (dstore.at(w - 1) < dstore.at(w)) {
			if (dstore.at(w) > dstore.at(w + 1) && dstore.at(w) > 500) {
				xx.at(marcury) = w;
				//printf("%d,%d\n", w, marqry);
				marcury += 1;
			}
		}
		if (marcury == 4) {
			xx.at(0) = xx.at(1);
			xx.at(1) = xx.at(2);
			xx.at(2) = xx.at(3);
			break;
		}
	}
	if (marcury < 3) {
		exit;
	}
	
	vector<double> distance(a);
	int xx_tmp = 0;
	for (int q = 0; q < a; q++) {
		Scalar color(rand() & 255, rand() & 255, rand() & 255);
		distance.at(q) = sqrt(pow(G.x - (double)keypoint.at(q).pt.x, 2) + pow(G.y - (double)keypoint.at(q).pt.y, 2));
		if (distance.at(q) == store.at(xx.at(0)).first) {
			edge1 = keypoint.at(q).pt;
		}
		else if (distance.at(q) == store.at(xx.at(1)).first) {
			edge2 = keypoint.at(q).pt;
		}
		else if (distance.at(q) == store.at(xx.at(2)).first) {
			edge3 = keypoint.at(q).pt;
		}
	}

	if (edge1.x > edge2.x) {
		edge_tmp = edge2;
		edge2 = edge1;
		edge1 = edge_tmp;
		xx_tmp = xx.at(1);
		xx.at(1) = xx.at(0);
		xx.at(0) = xx_tmp;
	}
	if (edge1.x > edge3.x) {
		edge_tmp = edge3;
		edge3 = edge1;
		edge1 = edge_tmp;
		xx_tmp = xx.at(2);
		xx.at(2) = xx.at(0);
		xx.at(0) = xx_tmp;
	}
	
	Point A = Point(0, 0);
	Point B = Point(0, 0);
	double cos = 0;

	if (edge1.x > 0 && edge1.y > 0) {
		Point square = Point(90, 80);
		A.x = edge2.x - square.x;
		A.y = edge2.y - square.y;
		B.x = edge3.x - square.x;
		B.y = edge3.y - square.y;

		cos = ((double)A.x * (double)B.x + (double)A.y * (double)B.y) / (sqrt(pow(A.x, 2) + pow(A.y, 2)) * sqrt(pow(B.x, 2) + pow(B.y, 2)));
		theta = acos(cos) * (double)180 / PI;
	}
	/*
	if (sqrt(pow(edge2.x - edge3.x, 2) + pow(edge2.y - edge3.y, 2)) < 40) {
		Scalar color(rand() & 255, rand() & 255, rand() & 255);
		//imshow("error", img);
		waitKey(1);
	}

	vector<double>distance1(a);
	vector<double>distance2(a);
	vector<double>distance3(a);
	vector<vector<Point>>keep1(5, vector<Point>(a));
	vector<vector<Point>>keep2(5, vector<Point>(a));
	vector<vector<Point>>keep3(5, vector<Point>(a));
	vector<Point> G1(5);
	vector<Point> G2(5);
	vector<Point> G3(5);
	vector<pair<double, double>>G1maxstore(6);
	vector<pair<double, double>>G1minstore(6);
	vector<pair<double, double>>G2maxstore(6);
	vector<pair<double, double>>G2minstore(6);
	vector<pair<double, double>>G3maxstore(6);
	vector<pair<double, double>>G3minstore(6);
	vector<double> asp1(5);
	vector<double> asp2(5);
	vector<double> asp3(5);

	for (int r = 0; r < 5; r++) {//領域増加
		int u1 = 0, u2 = 0, u3 = 0;
		double sumx1 = 0;
		double sumy1 = 0;
		double sumx2 = 0;
		double sumy2 = 0;
		double sumx3 = 0;
		double sumy3 = 0;
		//double set_distance = (store.at(0).first / 3)+(store.at(0).first / 8)*r;
		double set_distance1 = (store.at(xx.at(0)).first / 6) * (r + 1);
		double set_distance2 = (store.at(xx.at(1)).first / 6) * (r + 1);
		double set_distance3 = (store.at(xx.at(2)).first / 6) * (r + 1);

		for (int u = 0; u < a; u++) {//全体検索
			distance1.at(u) = sqrt(pow(edge1.x - (double)keypoint.at(u).pt.x, 2) + pow(edge1.y - (double)keypoint.at(u).pt.y, 2));
			distance2.at(u) = sqrt(pow(edge2.x - (double)keypoint.at(u).pt.x, 2) + pow(edge2.y - (double)keypoint.at(u).pt.y, 2));
			distance3.at(u) = sqrt(pow(edge3.x - (double)keypoint.at(u).pt.x, 2) + pow(edge3.y - (double)keypoint.at(u).pt.y, 2));
			if (distance1.at(u) < set_distance1) {
				sumx1 += keypoint.at(u).pt.x;
				sumy1 += keypoint.at(u).pt.y;
				keep1.at(r).at(u1) = keypoint.at(u).pt;
				//circle(AKAZE5, keypoint.at(u).pt, 1, Scalar(0, 0, 255), 2, 5);
				u1++;
			}

			if (distance2.at(u) < set_distance2) {
				sumx2 += keypoint.at(u).pt.x;
				sumy2 += keypoint.at(u).pt.y;
				keep2.at(r).at(u2) = keypoint.at(u).pt;
				//circle(AKAZE5, keypoint.at(u).pt, 1, Scalar(0, 255, 0), 2, 5);
				u2++;
			}

			if (distance3.at(u) < set_distance3) {
				sumx3 += keypoint.at(u).pt.x;
				sumy3 += keypoint.at(u).pt.y;
				keep3.at(r).at(u3) = keypoint.at(u).pt;
				//circle(AKAZE5, keypoint.at(u).pt, 1, Scalar(255, 0, 0), 2, 5);
				u3++;
			}
		}

		G1.at(r).x = sumx1 / u1;
		G1.at(r).y = sumy1 / u1;
		G2.at(r).x = sumx2 / u2;
		G2.at(r).y = sumy2 / u2;
		G3.at(r).x = sumx3 / u3;
		G3.at(r).y = sumy3 / u3;

		vector<pair<double, double>> G1data(u1);//radian,distance
		vector<pair<double, double>> G2data(u2);//radian,distance
		vector<pair<double, double>> G3data(u3);//radian,distance

		//長さと角度の計算
		for (int r1 = 0; r1 < u1; r1++) {
			G1data.at(r1).second = sqrt(pow(G1.at(r).x - keep1.at(r).at(r1).x, 2) + pow(G1.at(r).y - keep1.at(r).at(r1).y, 2));
			G1data.at(r1).first = atan2(G1.at(r).y - keep1.at(r).at(r1).y, G1.at(r).x - keep1.at(r).at(r1).x);
		}
		for (int r2 = 0; r2 < u2; r2++) {
			G2data.at(r2).second = sqrt(pow(G2.at(r).x - keep2.at(r).at(r2).x, 2) + pow(G2.at(r).y - keep2.at(r).at(r2).y, 2));
			G2data.at(r2).first = atan2(G2.at(r).y - keep2.at(r).at(r2).y, G2.at(r).x - keep2.at(r).at(r2).x);
		}
		for (int r3 = 0; r3 < u3; r3++) {
			G3data.at(r3).second = sqrt(pow(G3.at(r).x - keep3.at(r).at(r3).x, 2) + pow(G3.at(r).y - keep3.at(r).at(r3).y, 2));
			G3data.at(r3).first = atan2(G3.at(r).y - keep3.at(r).at(r3).y, G3.at(r).x - keep3.at(r).at(r3).x);
		}

		sort(G1data.begin(), G1data.end());
		sort(G2data.begin(), G2data.end());
		sort(G3data.begin(), G3data.end());
		int s1 = 0, s2 = 0, s3 = 0;
		double set_radian1 = -2;
		double set_radian2 = -2;
		double set_radian3 = -2;
		//ラジアン6等分&最大値取得
		for (int e1 = 0; e1 < u1; e1++) {

			if (e1 == 0) {
				G1minstore.at(s1).first = G1data.at(e1).second;
				G1minstore.at(s1).second = G1data.at(e1).first;
			}

			if (G1data.at(e1).first > set_radian1) {
				set_radian1 += 1;
				s1++;
				if (s1 > 5) {
					break;
				}
				G1minstore.at(s1).first = G1data.at(e1).second;
				G1minstore.at(s1).second = G1data.at(e1).first;
			}

			if (G1data.at(e1).first < set_radian1) {
				if (G1maxstore.at(s1).first < G1data.at(e1).second) {
					G1maxstore.at(s1).first = G1data.at(e1).second;
					G1maxstore.at(s1).second = G1data.at(e1).first;
				}

				if (G1minstore.at(s1).first > G1data.at(e1).second) {
					G1minstore.at(s1).first = G1data.at(e1).second;
					G1minstore.at(s1).second = G1data.at(e1).first;
				}
			}
		}
		for (int e2 = 0; e2 < u2; e2++) {
			if (e2 == 0) {
				G2minstore.at(s2).first = G2data.at(e2).second;
				G2minstore.at(s2).second = G2data.at(e2).first;
			}

			if (G2data.at(e2).first > set_radian2) {
				set_radian2 += 1;
				s2++;
				if (s2 > 5) {
					break;
				}
				G2minstore.at(s2).first = G2data.at(e2).second;
				G2minstore.at(s2).second = G2data.at(e2).first;
			}

			if (G2data.at(e2).first < set_radian2) {
				if (G2maxstore.at(s2).first < G2data.at(e2).second) {
					G2maxstore.at(s2).first = G2data.at(e2).second;
					G2maxstore.at(s2).second = G2data.at(e2).first;
				}

				if (G2minstore.at(s2).first > G2data.at(e2).second) {
					G2minstore.at(s2).first = G2data.at(e2).second;
					G2minstore.at(s2).second = G2data.at(e2).first;
				}
			}
		}
		for (int e3 = 0; e3 < u3; e3++) {
			if (e3 == 0) {
				G3minstore.at(s3).first = G3data.at(e3).second;
				G3minstore.at(s3).second = G3data.at(e3).first;
			}

			if (G3data.at(e3).first > set_radian3) {
				set_radian3 += 1;
				s3++;
				if (s3 > 5) {
					break;
				}
				G3minstore.at(s3).first = G3data.at(e3).second;
				G3minstore.at(s3).second = G3data.at(e3).first;
			}

			if (G3data.at(e3).first < set_radian3) {
				if (G3maxstore.at(s3).first < G3data.at(e3).second) {
					G3maxstore.at(s3).first = G3data.at(e3).second;
					G3maxstore.at(s3).second = G3data.at(e3).first;
				}

				if (G3minstore.at(s3).first > G3data.at(e3).second) {
					G3minstore.at(s3).first = G3data.at(e3).second;
					G3minstore.at(s3).second = G3data.at(e3).first;
				}
			}
		}

		sort(G1maxstore.rbegin(), G1maxstore.rend());
		sort(G2maxstore.rbegin(), G2maxstore.rend());
		sort(G3maxstore.rbegin(), G3maxstore.rend());
		sort(G1minstore.begin(), G1minstore.end());
		sort(G2minstore.begin(), G2minstore.end());
		sort(G3minstore.begin(), G3minstore.end());

		if (s1 == 0 || s2 == 0 || s3 == 0) {
			asp1.at(r) = 0;
			asp2.at(r) = 0;
			asp3.at(r) = 0;
			continue;
		}

		asp1.at(r) = G1maxstore.at(0).first / G1minstore.at((double)6 - s1).first;
		asp2.at(r) = G2maxstore.at(0).first / G2minstore.at((double)6 - s2).first;
		asp3.at(r) = G3maxstore.at(0).first / G3minstore.at((double)6 - s3).first;

		//printf("red:%f green:%f blue:%f\n", asp1.at(r), asp2.at(r), asp3.at(r));
		if (r == 4) {
			//imshow("ar", AKAZE5);
			waitKey(1);
		}
	}

	double base_asp1 = 0;
	double base_asp2 = 0;
	double base_asp3 = 0;
	int index1 = 0;
	int index2 = 0;
	int index3 = 0;

	for (int z = 0; z < 5; z++) {
		if (asp1.at(z) > base_asp1) {
			base_asp1 = asp1.at(z);
			index1 = z;
		}
		if (asp2.at(z) > base_asp2) {
			base_asp2 = asp2.at(z);
			index2 = z;
		}
		if (asp3.at(z) > base_asp3) {
			base_asp3 = asp3.at(z);
			index3 = z;
		}
	}

	Point v1 = center(edge2, G2.at(index2), edge1, G1.at(index1));
	Point v2 = center(edge3, G3.at(index3), edge2, G2.at(index2));
	Point v3 = center(edge1, G1.at(index1), edge3, G3.at(index3));

	v.x = (v1.x + v2.x + v3.x) / 3;
	v.y = (v1.y + v2.y + v3.y) / 3;
	if (v.x > edge2.x || v.x > edge3.x) {
		v = Point(0, 0);
	}
	*/
	return { v,theta };
}

//画像処理関数
//int main(int argc, const char* argv[])
unsigned int __stdcall camera(PVOID pv)
{
	VideoCapture capture(0);
	
	int sikimi = 0, renbu = 0, katorea = 0, gyima = 0;
	int step = 0;
	int step_point = 0;
	int point = 0;
	vector<Point> v(95);
	int White = 0;
	int diff_Flag = 0;
	int checkwhite = 0;
	int checkwhite2 = 0;
	int checkpoint = 0;
	int checkpoint2 = 0;
	vector<int> countx(5);
	vector<int> county(5);
	
	Rect part(0, 0, 250, 150);
	Rect impart2(1158, 0, 250, 150);
	Rect part2(454, 0, 250, 150);
	const char* name1 = "Comfigure";
	const char* name2 = "Detection";
	const char* name3 = "Output";
	int mode_left = 0;
	int mode_right = 0;
	vector<pair<int, int>>countdx(1000);

	int imageCount = 1; // 入力画像の枚数
	int channelsToUse[] = { 0 }; // 0番目のチャネルを使う
	int dimention = 1; // ヒストグラムの次元数
	int binCount = 256; // ヒストグラムのビンの数
	int binCounts[] = { binCount };
	float range[] = { 0, 256 }; // データの範囲は0～255
	const float* histRange[] = { range };
	

	for (;;) {
		startWindowThread();
		for (;;) {
			Mat frame, rame2, rame2_gry, difframe, difframe_canny;
			Mat rame21, rame21_gry, difframe2, difframe_canny2;
			Mat useframe, useframe_gry, useframe_canny, Use;
			Mat useframe2, useframe_gry2, useframe_canny2, Use2;
			Mat imframe, noframe,tmp;
			Rect vision = Rect(250, 150, 195, 175);
			Rect target = Rect(220, 130, 255, 215);//for Optical
			Rect rockon = Rect(220, 140, 255, 195);//for AKAZE
			for (;;) {
				waitKey(2);
				if (state == 2) {
					DestroyWindow(hWnd);
					break;
				}
				if (STATUS == 0) {
					mode_left = 0;
					mode_right = 0;
					for (;;) {
						waitKey(2);
						capture >> frame;
						waitKey(2);
						if (frame.empty()) {
							break;
						}
						moveWindow(name1, 1910, 0);
						useframe = frame(part).clone();

						resize(frame, imframe, Size(), 2, 2);
						useframe2 = frame(part2).clone();
						rectangle(imframe, part, Scalar(255, 55, 255), 3);
						rectangle(imframe, impart2, Scalar(55, 255, 255), 3);
						imshow(name1, imframe);

						cvtColor(useframe, useframe_gry, COLOR_BGR2GRAY);
						cvtColor(useframe2, useframe_gry2, COLOR_BGR2GRAY);
						waitKey(1);
						capture >> rame2;
						Use2 = rame2.clone();
						rame2 = rame2(part).clone();
						rame21 = Use2(part2).clone();
						cvtColor(rame2, rame2_gry, COLOR_BGR2GRAY);
						cvtColor(rame21, rame21_gry, COLOR_BGR2GRAY);
						absdiff(useframe_gry, rame2_gry, difframe);
						absdiff(useframe_gry2, rame21_gry, difframe2);
						medianBlur(difframe, difframe, 3);
						medianBlur(difframe2, difframe2, 3);
						Canny(difframe, difframe_canny, 100, 15, 3, true);
						Canny(difframe2, difframe_canny2, 100, 15, 3, true);
						//imshow("ddd", difframe_canny2);
						//Canny(useframe_gry, useframe_canny, 10, 15, 3, true);
						//blur(difframe_canny, difframe_canny, Size(5,5));
						Use = difframe_canny.clone();
						checkwhite = MatArea(difframe_canny);
						checkwhite2 = MatArea(difframe_canny2);
						//imshow("shiro", Use);
						waitKey(2);
						if (checkwhite > checkwhite2 && checkwhite > 7000) {
							checkpoint++;
						}
						else if (checkwhite2 > checkwhite && checkwhite2 > 7000) {
							checkpoint2++;
						}

						if (checkpoint > 10) {
							STATUS = 1;
							checkpoint = 0;
							checkpoint2 = 0;
							mode_left = 1;
						}
						else if (checkpoint2 > 3) {
							STATUS = 1;
							checkpoint2 = 0;
							checkpoint = 0;
							mode_right = 1;
						}


						if (STATUS == 1 || state == 2) {
							waitKey(1);
							moveWindow(name1, 0, 0);
							resize(frame, noframe, Size(), 0.3, 0.3);
							imshow(name1, noframe);
							break;
						}
					}
				}
				if (STATUS == 1) {
					break;
				}
			}
			
			Mat frame1, prvs, prvs1, prvs11, prvs1blur;
			waitKey(2);
			capture >> frame1;
			Mat AKimg1, AKimg2, AKimg3, AKimg99, AKdiff, AKedge;
			AKimg1 = frame1(rockon).clone();
			Rect selection(150, 50, 400, 350);
			Mat copy1, copy2;
			frame1 = frame1(target);
			cvtColor(frame1, prvs1, COLOR_BGR2GRAY);
			medianBlur(prvs1, prvs1, 5);
			copy1 = prvs1.clone();//差分用1
			medianBlur(prvs1, prvs1blur, 5);
			bilateralFilter(prvs1blur, prvs, 17, 40, 5);

			Mat frame2, frame3, frame4, frame5;
			Point G = Point(0, 0);
			Mat next, next1;
			int stuck = 3;
			int nowstate = 0;
			int bstate = 0;
			int stateflag = 0;
			int venus = 0;
			//動体検出部
			for (;;) {
				capture >> frame2;
				frame3 = frame2.clone();
				tmp = frame2(vision).clone();
				AKimg2 = frame2(rockon).clone();
				AKimg3 = frame2(rockon).clone();
				AKimg99 = frame2(rockon).clone();
				//medianBlur(AKimg1, AKimg1, 5);
				//medianBlur(AKimg2, AKimg2, 5);
				AKdiff = Bit_Wise2(AKimg1, AKimg2);
				medianBlur(AKdiff, AKdiff, 3);
				Canny(AKdiff, AKedge, 50, 100, 3, true);
				dilate(AKedge, AKedge, Mat(), Point(-1, -1), 5);
				Mat AKimg4;
				bitwise_and(AKimg3, AKimg3, AKimg4, AKedge);
				//imshow("check", AKimg4);
				auto algorithm = AKAZE::create();
				vector<cv::KeyPoint> keypoint;
				algorithm->detect(AKimg4, keypoint);
				int b = keypoint.size();
				if (b < 2) {
					continue;
				}
				Point fulcrum = three_seg(keypoint).first;
				double theta = three_seg(keypoint).second;
				if (theta > 35) {
					theta += 40;
				}
				else if(theta<30){
					theta -= 30;
				}

				if (theta > 50) {
					stuck++;
				}
				else {
					stuck--;
				}

				if (stuck == 6) {
					nowstate = 1;
				}
				else if (stuck == 0) {
					nowstate = 0;
				}
				else {
					nowstate = bstate;
				}

				if (venus % 3 == 0) {
					stuck = 3;
				}
				bstate = nowstate;
				AKimg1 = AKimg99.clone();

				/*****Optical*******/
				vector< vector<Point> > contours_subset1;
				vector< vector<Point> > contours_subset2;
				vector< vector<Point> > contours_subset3;
				vector< vector<Point> > contours_subset4;
				Point minP1 = Point(0, 0);
				Point maxP1 = Point(0, 0);
				Point minP2 = Point(0, 0);
				Point maxP2 = Point(0, 0);
				Point minP3 = Point(0, 0);
				Point maxP3 = Point(0, 0);
				Point minP4 = Point(0, 0);
				Point maxP4 = Point(0, 0);
				Point imminP1 = Point(0, 0);
				Point immaxP1 = Point(0, 0);
				Point imminP2 = Point(0, 0);
				Point immaxP2 = Point(0, 0);
				Point imminP3 = Point(0, 0);
				Point immaxP3 = Point(0, 0);
				Point imminP4 = Point(0, 0);
				Point immaxP4 = Point(0, 0);
				Mat imframe3, noframe3;

				frame2 = frame2(target);
				cvtColor(frame2, next1, COLOR_BGR2GRAY);
				medianBlur(next1, next1, 5);//7
				medianBlur(next1, next1, 5);//7
				bilateralFilter(next1, next, 17, 40, 5);
				copy2 = next.clone();
				Mat bgr;
				Mat hsv8 = Optical(prvs, next);
				Mat flowBgr;
				flowBgr = hsv8.clone();
				cvtColor(flowBgr, flowBgr, COLOR_HSV2BGR);
				Mat bgf1 = mask1(hsv8);
				Mat bgf2 = mask2(hsv8);
				Mat bgf3 = mask3(hsv8);
				Mat bgf4 = mask4(hsv8);

				Canny(copy2, copy2, 10, 15, 3, true);
				bitwise_and(copy2, bgf1, bgf1);
				bitwise_and(copy2, bgf2, bgf2);
				bitwise_and(copy2, bgf3, bgf3);
				bitwise_and(copy2, bgf4, bgf4);
				contours_subset1 = contours(bgf1);
				contours_subset2 = contours(bgf2);
				contours_subset3 = contours(bgf3);
				contours_subset4 = contours(bgf4);
				for (int i = 0; i < contours_subset1.size(); i++) {
					minP1 = minPoint(contours_subset1.at(i));
					maxP1 = maxPoint(contours_subset1.at(i));

					minP1.x = minP1.x + 150.0;
					minP1.y = minP1.y + 50.0;

					maxP1.x = maxP1.x + 150.0;
					maxP1.y = maxP1.y + 50.0;
					imminP1 = minP1;
					immaxP1 = maxP1;
				}

				for (int i = 0; i < contours_subset2.size(); i++) {
					minP2 = minPoint(contours_subset2.at(i));
					maxP2 = maxPoint(contours_subset2.at(i));

					minP2.x = minP2.x + 150.0;
					minP2.y = minP2.y + 50.0;

					maxP2.x = maxP2.x + 150.0;
					maxP2.y = maxP2.y + 50.0;
					imminP2 = minP2;
					immaxP2 = maxP2;
				}

				for (int i = 0; i < contours_subset3.size(); i++) {
					minP3 = minPoint(contours_subset3.at(i));
					maxP3 = maxPoint(contours_subset3.at(i));

					minP3.x = minP3.x + 150.0;
					minP3.y = minP3.y + 50.0;

					maxP3.x = maxP3.x + 150.0;
					maxP3.y = maxP3.y + 50.0;
					imminP3 = minP3;
					immaxP3 = maxP3;
				}

				for (int i = 0; i < contours_subset4.size(); i++) {
					minP4 = minPoint(contours_subset4.at(i));
					maxP4 = maxPoint(contours_subset4.at(i));

					minP4.x = minP4.x + 150.0;
					minP4.y = minP4.y + 50.0;

					maxP4.x = maxP4.x + 150.0;
					maxP4.y = maxP4.y + 50.0;
					imminP4 = minP4;
					immaxP4 = maxP4;
				}

				if (minP1 != Point(0, 0) && minP2 != Point(0, 0) && maxP1 != Point(0, 0) && maxP1 != Point(0, 0)
					&& minP3 != Point(0, 0) && minP4 != Point(0, 0) && maxP3 != Point(0, 0) && maxP4 != Point(0, 0)) {

					if (minP1.y < minP2.y) {
						imminP1.y = minP1.y + 20.0;
						immaxP1.y = maxP1.y - 20.0;
					}
					else {
						imminP2.y = minP2.y - 20.0;
						immaxP2.y = maxP2.y + 20.0;
					}

					if (minP3.y < minP4.y) {
						imminP3.y = minP3.y + 20.0;
						immaxP3.y = maxP3.y - 20.0;
					}
					else {
						imminP4.y = minP4.y - 20.0;
						immaxP4.y = maxP4.y + 20.0;
					}
					
					G = center(immaxP1, imminP3, immaxP2, imminP4);
					circle(frame3, G, 15, Scalar(255, 255, 0), 3, 8);
					if (G.x < 0 || G.y < 0 || G.x > 700 || G.y > 450) {
						//continue;
					}
					cvtColor(hsv8, bgr, COLOR_HSV2BGR);
				}
				
				if (nowstate == 1 && stateflag==0) {
					sikimi = 1;
					stateflag = 1;
					putText(frame3, "1", Point(30, 40), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
				}

				if (nowstate == 0 && sikimi==1){
					renbu = 1;
					putText(frame3, "2", Point(30, 40), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
				}

				if (nowstate == 1 && renbu == 1) {
					katorea = 1;
					stateflag = 0;
					//putText(frame3, "3", Point(30, 40), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
				}

				if (katorea > 0) {
					gyima = 1;
				}
				rectangle(frame3, selection, Scalar(255, 55, 255), 1);
				rectangle(frame3, rockon, Scalar(0, 255, 255), 1);
				waitKey(1);
				moveWindow(name2, 1900, 0);
				resize(frame3, imframe3, Size(), 2, 2);
				imshow(name2, imframe3);
				waitKey(1);

				prvs = next;
				copy1 = copy2;

				if (gyima > 0) {
					countx = { 0,0,0,0,0 };
					county = { 0,0,0,0,0 };
					gyima = 0;
					katorea = 0;
					renbu = 0;
					sikimi = 0;
					waitKey(1);
					frame1.release();
					waitKey(1);
					frame2.release();
					waitKey(1);
					step = 1;
					waitKey(1);
					//capture >> frame4;
					waitKey(1);
					moveWindow(name2, 0, 300);

					resize(frame3, noframe3, Size(), 0.3, 0.3);
					imshow(name2, noframe3);
					break;
				}
				venus++;
			}

			//切り取り領域取得と処理
			
			capture >> frame4;
			Rect roi;
			Rect roi_origin;
			Rect roi_distance;
			int x_weidth = 320, y_height = 300;
			int point_x = 0, point_y = 0;
			if (mode_left == 1) {
				//roi = Rect(G.x - 25, G.y - 30, 195, 175);//Matching
				roi = vision;//Matching
			}
			else {
				roi = Rect(G.x - 175, G.y - 30, 195, 175);//Matching
			}
			roi_origin = Rect(100, 50, 400, 350);//Detection
			roi_distance = Rect(100, 20, x_weidth + 160, y_height + 100);//Detection
			Mat tmp2 = frame4(roi).clone();
			Mat AKAZEimg1 = frame4.clone();
			Mat tmp_clone = frame4(Rect(200,120,245,205));
			Mat edge_roi, tmp_roi;
			Mat gry_clone, gry_clone1, gry_clone2;
			Mat tmp2_gry, edge_roi2, diffedge;

			cvtColor(tmp_clone, gry_clone, COLOR_BGR2GRAY);
			diffedge = Bit_Wise2(tmp, tmp2);
			medianBlur(diffedge, diffedge, 3);
			Canny(diffedge, edge_roi2, 50, 100, 3, true);

			Mat diffedge_copy = edge_roi2.clone();
			int white = 0;
			int turning = 1;
			white = countNonZero(diffedge_copy);//1000
			if (white < 1000) {
				turning = 0;
				break;
			}
			Mat edge_roi_erode = edge_roi.clone();
			Mat diff = diffedge_copy.clone();
			Mat histogram1;
			calcHist(&diff, imageCount, channelsToUse, Mat(), histogram1, dimention, binCounts, histRange);
			double shiro_edge = countNonZero(edge_roi2);
			double edge_per = shiro_edge * 100 / (double(roi.width) * double(roi.height));

			int up_flag = 0, down_flag = 0, left_flag = 0, right_flag = 0, stop_flag1 = 0;
			int in_flag = 0, out_flag = 0, stop_flag2 = 0;
			int stop = 0;
			int clock = 0;
			int match = 0;
			waitKey(500);//0.5秒待つ
			double edge_per2 = 0;
			
			send_count = 1;
			int stop_parts = 0;
			int trans = 2;
			int transam = 0;
			Mat matching;
			Rect fake = Rect(20, 20, frame4.cols - 40, frame4.rows - 40);
			xb = 250;
			yb = 150;
			Mat img1, img2, src, dst, imdst, nodst;
			Mat img_gry, edge, edge_canny;
			Mat src4, src4_gry, src4_gry1, src4_gry2, src4_blur;
			Mat src_clone, srcedge;
			Mat AKAZEimg2,AKAZEimg4, AKAZEimg99, AKAZEdiff, AKAZEedge;
			double zheta = 0;
			int Stuck = 3;
			int Nowstate = 0;
			int State = 0;
			int Stateflag = 0;
			int hitokage = 0, zenigame = 0, husigidane = 0;
			int move_Flag = 0;
			int over_Flag = 0;
			int exit_Flag = 0;
			int pre_x = 0, pre_y = 0;
			double len = 0;
			destroyAllWindows();
			//トラッキング
			if (turning == 1) {
				for (;;) {
					Rect roiroi = Rect(xb, yb, roi.width, roi.height);
					Rect trick = Rect(xb, yb, roi.width + 50, roi.height + 30);
					if (xb > 50 && yb > 30) {
						trick.x = xb - 50;
						trick.y = yb - 30;
					}
					capture >> img1;
					capture >> img2;
					src = img2.clone();
					AKAZEimg2 = src.clone();
					Mat AKAZEimg3;
					AKAZEimg4 = AKAZEimg2.clone();
					AKAZEimg99 = AKAZEimg2.clone();
					AKAZEdiff = Bit_Wise2(AKAZEimg1, AKAZEimg2);
					medianBlur(AKAZEdiff, AKAZEdiff, 3);
					Canny(AKAZEdiff, AKAZEedge, 50, 100, 3, true);
					dilate(AKAZEedge, AKAZEedge, Mat(), Point(-1, -1), 5);
					bitwise_and(AKAZEimg4, AKAZEimg4, AKAZEimg3, AKAZEedge);
					//circle(AKAZEimg3(trick), Point(90,80), 10, Scalar(255, 0, 255), 3, 8);
					imshow("teast", AKAZEimg3(trick));
					auto algorithm2 = AKAZE::create();
					vector<KeyPoint> keypoint1;
					algorithm2->detect(AKAZEimg3(trick), keypoint1);
					int b = keypoint1.size();
					if (b < 10) {
						continue;
					}
					AKAZEimg1 = AKAZEimg99.clone();
					zheta = three_seg(keypoint1).second;
					if (zheta > 35) {
						zheta += 40;
					}
					else if (zheta < 20) {
						zheta -= 30;
					}

					if (zheta > 50) {
						Stuck++;
					}
					else {
						Stuck--;
					}

					if (Stuck == 6) {
						Nowstate = 1;
					}
					else if (Stuck == 0) {
						Nowstate = 0;
					}
					else {
						Nowstate = State;
					}

					if (clock % 3 == 0) {
						Stuck = 3;
					}
					State = Nowstate;

					if (Nowstate == 1 && Stateflag == 0) {
						hitokage = 1;
						putText(frame3, "1", Point(30, 40), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
					}

					if (Nowstate == 0 && hitokage == 1) {
						zenigame = 1;
						hitokage = 0;
						putText(frame3, "2", Point(30, 40), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
					}

					if (Nowstate == 1 && zenigame == 1) {
						husigidane = 1;
						zenigame = 0;
						//putText(frame3, "3", Point(30, 40), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
					}

					if (husigidane > 0 && len < 40 && move_Flag == 0) {
						husigidane = 0;
						exit_Flag++;
						diff_Flag = !diff_Flag;
					}
					src4 = img2(roi_origin).clone();
					img_gry = Bit_Wise2(img1, img2);
					edge = img_gry.clone();
					medianBlur(edge, edge, 3);
					Canny(edge, edge_canny, 50, 100, 3, true);
					Mat edge_dilate = edge_canny(roiroi).clone();
					Mat histogram2;
					calcHist(&edge_dilate, imageCount, channelsToUse, Mat(), histogram2, dimention, binCounts, histRange);
					templateMatch(edge_canny, diffedge_copy, src);
					matching = src(fake).clone();
					rectangle(matching, roi_origin, Scalar(255, 55, 255), 3);
					if (xb < 20 || xb>460 || yb < 20 || yb>270) {
						xb = pre_x;
						yb = pre_y;
					}

					roiroi.x = xb - 20;
					roiroi.y = yb - 20;
					rectangle(matching, roiroi, Scalar(0, 255, 255), 3);
					len = sqrt(pow(xb - pre_x, 2) + pow(yb - pre_y, 2));
					if (len > 50) {
						over_Flag = 1;
						line(matching, Point(xb, yb), Point(pre_x, pre_y), Scalar(0, 200, 255), 3, 4);
					}
					else {
						over_Flag = 0;
					}

					imshow("cry", edge_canny(roiroi));

					if (diff_Flag == 0) {
						line(matching, Point(100, 50), Point(100, 400), Scalar(0, 255, 0), 5, 8);
						line(matching, Point(500, 50), Point(500, 400), Scalar(0, 255, 0), 5, 8);
						if (over_Flag == 0) {
							if (xb < 90) {
								putText(matching, "Left Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
								move_Flag = 1;
							}
							else if (xb > 320) {
								putText(matching, "Right Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
								move_Flag = 1;
							}
							else if (yb < 40) {
								putText(matching, "Up Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
								move_Flag = 1;
							}
							else if (yb > 240) {
								putText(matching, "Down Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
								move_Flag = 1;
							}
							else {
								move_Flag = 0;
							}
						}
					}
					else {
						line(matching, Point(100, 50), Point(500, 50), Scalar(255, 255, 0), 5, 8);
						line(matching, Point(100, 400), Point(500, 400), Scalar(255, 255, 0), 5, 8);
						if (over_Flag == 0) {
							if (xb < 90) {
								putText(matching, "Zoom Out", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
								move_Flag = 1;
							}
							else if (xb > 320) {
								putText(matching, "Zoom In", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
								move_Flag = 1;
							}
							else {
								move_Flag = 0;
							}
						}
					}

					if (move_Flag == 1) {
						exit_Flag = 0;
					}
					if (exit_Flag == 2) {
						//break;
					}

					if (clock > 0 && step == 0) {//|| point > 10) {
						ct = 0;
						step = 0;
						point = 0;
						send_count = 9;
						STATUS = 0;
						waitKey(2);
						moveWindow(name3, 0, 500);
						resize(matching, nodst, Size(), 0.2, 0.2);
						imshow(name3, nodst);
						break;
					}
					clock++;
					waitKey(1);
					moveWindow(name3, 1905, 0);
					resize(matching, imdst, Size(), 2, 2);
					imshow(name3, imdst);
					imshow("edge", diffedge_copy);
					//imshow("edge_canny",edge_canny);
					waitKey(1);
					pre_x = xb;
					pre_y = yb;
				}
			}
		}
	}
	return 0;
}

int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR szStr, int iCmdShow)
{
	//モーダルダイアログボックスを作成

	DialogBox(
		hInst,
		MAKEINTRESOURCE(IDD_DIALOG1),
		NULL,
		(DLGPROC)DlgWndProc);

	ShowWindow(hWnd, SW_SHOW);
	UpdateWindow(hWnd);

	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg); // キーボードメッセージを変換する
		DispatchMessage(&msg);  // 1つのウィンドウプロシージャにメッセージを送る
	}
	return msg.wParam;
	//return 0;

}
