#define STRICT
#define NOMINMAX

#include <opencv2/core/utility.hpp>
#include <opencv2/video/tracking.hpp>
#include <opencv2/videoio.hpp> // videoioのヘッダーをインクルード
#include <opencv2/highgui.hpp> // highguiのヘッダーをインクルード
#include <opencv2/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc/imgproc_c.h>
#include <opencv2/highgui/highgui_c.h>
#include <opencv2/objdetect/detection_based_tracker.hpp>
#include <iostream>
#include<string>
#include <vector>
#include <stdio.h>
#include<math.h>
#include<process.h>
#include<windows.h>
#include<windowsx.h>
#include <tchar.h>
#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/video.hpp>
#include<cstring>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/tracking.hpp>
#include <numeric>      // std::iota
#include <algorithm>    // std::sort, std::stable_sort
#include <opencv2/video/background_segm.hpp>
#include <functional>
#include<stdlib.h>　//WM＿TIMERの精度が心配な時
#include<time.h>　　//WM＿TIMERの精度が心配な時
#include <random>
#include<map>

#ifdef _DEBUG
#pragma comment(lib, "opencv_world452d.lib")
#else
#pragma comment(lib, "opencv_world452.lib")
#endif

using namespace cv;
using namespace std;
double PI = 22 / 7;

Mat Bit_Wise2(Mat img1, Mat img2) {
	Mat img1_gry, img2_gry, img_gry;
	cvtColor(img1, img1_gry, COLOR_BGR2GRAY);
	cvtColor(img2, img2_gry, COLOR_BGR2GRAY);
	absdiff(img1_gry, img2_gry, img_gry);

	return img_gry;
}

Point center(Point max, Point min, Point MAX, Point MIN) {
	Point v;
	int k = 0;
	double s1 = 0, s2 = 0;
	int P1X = MIN.x;
	int P1Y = MIN.y;
	int P2Y = min.y;
	int P2X = min.x;
	int P3X = MAX.x;
	int P3Y = MAX.y;
	int P4Y = max.y;
	int P4X = max.x;

	s1 = ((P4X - P2X) * (P1Y - P2Y) - (P4Y - P2Y) * (P1X - P2X)) / 2;
	s2 = ((P4X - P2X) * (P2Y - P3Y) - (P4Y - P2Y) * (P2X - P3X)) / 2;

	v = Point(0, 0);
	v.x = P1X + ((double)P3X - (double)P1X) * s1 / (s1 + s2);
	v.y = P1Y + ((double)P3Y - (double)P1Y) * s1 / (s1 + s2);

	return v;
}

pair<Point, double> three_seg(vector<KeyPoint> keypoint) {
	int a = 0;
	double sumx = 0, sumy = 0;
	Point G = Point(0, 0);
	for (int i = 0; i < keypoint.size(); i++) {
		//circle(img, keypoint.at(i).pt, 1, Scalar(0, 255, 255), 2, 5);
		sumx += (double)keypoint.at(i).pt.x;
		sumy += (double)keypoint.at(i).pt.y;
		a++;
	}
	G.x = sumx / (double)a;
	G.y = sumy / (double)a;
	//circle(img, G, 4, Scalar(255, 0, 255), 2, 5);

	vector<pair<double, double>> data(a);//radian,distance
	for (int j = 0; j < a; j++) {
		data.at(j).second = sqrt(pow(G.x - (double)keypoint.at(j).pt.x, 2) + pow(G.y - (double)keypoint.at(j).pt.y, 2));
		data.at(j).first = atan2(G.y - (double)keypoint.at(j).pt.y, G.x - (double)keypoint.at(j).pt.x);
		//degree.at(j) = radian.at(j) * (double)180 / PI;
		//printf("%f,%f\n", data.at(j).first, data.at(j).second);
	}
	sort(data.begin(), data.end());
	vector<pair<double, int>> store(6);//distance,index
	Point edge1 = Point(0, 0);
	Point edge2 = Point(0, 0);
	Point edge3 = Point(0, 0);
	Point edge_tmp = Point(0, 0);
	double set_radian = -2;
	int s = 0;
	//ラジアン6等分&最大値取得
	for (int k = 0; k < a; k++) {
		if (data.at(k).first > set_radian) {
			set_radian += 1;
			s++;
			if (s > 5) {
				break;
			}
		}

		if (data.at(k).first < set_radian) {
			if (store.at(s).first < data.at(k).second) {
				store.at(s).first = data.at(k).second;
				store.at(s).second = k;
			}
		}
	}

	sort(store.rbegin(), store.rend());
	for (int b = 0; b < 2; b++) {
		if (abs(store.at(b + 1).second - store.at(b).second) < 2) {
			store.at(b + 1) = store.at(b + 2);
			store.at(b + 2) = store.at(b + 3);
		}
	}

	vector<double> distance(a);
	for (int q = 0; q < a; q++) {
		distance.at(q) = sqrt(pow(G.x - (double)keypoint.at(q).pt.x, 2) + pow(G.y - (double)keypoint.at(q).pt.y, 2));
		if (distance.at(q) == store.at(0).first) {
			edge1 = keypoint.at(q).pt;
		}
		else if (distance.at(q) == store.at(1).first) {
			edge2 = keypoint.at(q).pt;
		}
		else if (distance.at(q) == store.at(2).first) {
			edge3 = keypoint.at(q).pt;
		}
	}
	if (sqrt(pow(edge2.x - edge3.x, 2) + pow(edge2.y - edge3.y, 2)) < 40) {
		//continue;
	}

	if (edge1.x > edge2.x) {
		edge_tmp = edge2;
		edge2 = edge1;
		edge1 = edge_tmp;
	}
	if (edge1.x > edge3.x) {
		edge_tmp = edge3;
		edge3 = edge1;
		edge1 = edge_tmp;
	}
	//circle(img, edge1, 4, Scalar(0, 0, 255), -1, 5);
	//circle(img, edge2, 4, Scalar(0, 255, 0), -1, 5);
	//circle(img, edge3, 4, Scalar(255, 0, 0), -1, 5);
	//imshow("a1", img);
	waitKey(1);

	vector<double>distance1(a);
	vector<double>distance2(a);
	vector<double>distance3(a);
	vector<Point>keep1(a);
	vector<Point>keep2(a);
	vector<Point>keep3(a);
	vector<Point> G1(5);
	vector<Point> G2(5);
	vector<Point> G3(5);
	vector<double>G1maxstore(6);
	vector<double>G1minstore(6);
	vector<double>G2maxstore(6);
	vector<double>G2minstore(6);
	vector<double>G3maxstore(6);
	vector<double>G3minstore(6);
	vector<double> asp1(5);
	vector<double> asp2(5);
	vector<double> asp3(5);


	for (int r = 0; r < 5; r++) {//領域増加
		int u1 = 0, u2 = 0, u3 = 0;
		double sumx1 = 0;
		double sumy1 = 0;
		double sumx2 = 0;
		double sumy2 = 0;
		double sumx3 = 0;
		double sumy3 = 0;
		//double set_distance = (store.at(0).first / 3)+(store.at(0).first / 8)*r;
		double set_distance = (store.at(0).first / 6) * (r + 1);

		for (int u = 0; u < a; u++) {//全体検索
			distance1.at(u) = sqrt(pow(edge1.x - (double)keypoint.at(u).pt.x, 2) + pow(edge1.y - (double)keypoint.at(u).pt.y, 2));
			distance2.at(u) = sqrt(pow(edge2.x - (double)keypoint.at(u).pt.x, 2) + pow(edge2.y - (double)keypoint.at(u).pt.y, 2));
			distance3.at(u) = sqrt(pow(edge3.x - (double)keypoint.at(u).pt.x, 2) + pow(edge3.y - (double)keypoint.at(u).pt.y, 2));
			if (distance1.at(u) < set_distance) {
				sumx1 += keypoint.at(u).pt.x;
				sumy1 += keypoint.at(u).pt.y;
				keep1.at(u1) = keypoint.at(u).pt;
				//circle(img, keypoint.at(u).pt, 1, Scalar(0, 0, 255), 2, 5);
				u1++;
			}

			if (distance2.at(u) < set_distance) {
				sumx2 += keypoint.at(u).pt.x;
				sumy2 += keypoint.at(u).pt.y;
				keep2.at(u2) = keypoint.at(u).pt;
				//circle(img, keypoint.at(u).pt, 1, Scalar(0, 255, 0), 2, 5);
				u2++;
			}

			if (distance3.at(u) < set_distance) {
				sumx3 += keypoint.at(u).pt.x;
				sumy3 += keypoint.at(u).pt.y;
				keep3.at(u3) = keypoint.at(u).pt;
				//circle(img, keypoint.at(u).pt, 1, Scalar(255, 0, 0), 2, 5);
				u3++;
			}
		}

		G1.at(r).x = sumx1 / u1;
		G1.at(r).y = sumy1 / u1;
		G2.at(r).x = sumx2 / u2;
		G2.at(r).y = sumy2 / u2;
		G3.at(r).x = sumx3 / u3;
		G3.at(r).y = sumy3 / u3;

		vector<pair<double, double>> G1data(u1);//radian,distance
		vector<pair<double, double>> G2data(u2);//radian,distance
		vector<pair<double, double>> G3data(u3);//radian,distance


		//長さと角度の計算
		for (int r1 = 0; r1 < u1; r1++) {
			G1data.at(r1).second = sqrt(pow(G1.at(r).x - keep1.at(r1).x, 2) + pow(G1.at(r).y - keep1.at(r1).y, 2));
			G1data.at(r1).first = atan2(G1.at(r).y - keep1.at(r1).y, G1.at(r).x - keep1.at(r1).x);
			//printf("%f,%f\n", G1data.at(r1).first, G1data.at(r1).second);
		}
		//printf("\n");
		for (int r2 = 0; r2 < u2; r2++) {
			G2data.at(r2).second = sqrt(pow(G2.at(r).x - keep2.at(r2).x, 2) + pow(G2.at(r).y - keep2.at(r2).y, 2));
			G2data.at(r2).first = atan2(G2.at(r).y - keep2.at(r2).y, G2.at(r).x - keep2.at(r2).x);
			//printf("%f,%f\n", G2data.at(r2).first, G2data.at(r2).second);
		}
		//printf("\n");
		for (int r3 = 0; r3 < u3; r3++) {
			G3data.at(r3).second = sqrt(pow(G3.at(r).x - keep3.at(r3).x, 2) + pow(G3.at(r).y - keep3.at(r3).y, 2));
			G3data.at(r3).first = atan2(G3.at(r).y - keep3.at(r3).y, G3.at(r).x - keep3.at(r3).x);
			//printf("%f,%f\n", G3data.at(r3).first, G3data.at(r3).second);
		}

		sort(G1data.begin(), G1data.end());
		sort(G2data.begin(), G2data.end());
		sort(G3data.begin(), G3data.end());
		int s1 = 0, s2 = 0, s3 = 0;
		double set_radian1 = -2;
		double set_radian2 = -2;
		double set_radian3 = -2;
		//ラジアン6等分&最大値取得
		for (int e1 = 0; e1 < u1; e1++) {

			if (e1 == 0) {
				G1minstore.at(s1) = G1data.at(e1).second;
			}

			if (G1data.at(e1).first > set_radian1) {
				set_radian1 += 1;
				s1++;
				if (s1 > 5) {
					break;
				}
				G1minstore.at(s1) = G1data.at(e1).second;
			}

			if (G1data.at(e1).first < set_radian1) {
				if (G1maxstore.at(s1) < G1data.at(e1).second) {
					G1maxstore.at(s1) = G1data.at(e1).second;
				}

				if (G1minstore.at(s1) > G1data.at(e1).second) {
					G1minstore.at(s1) = G1data.at(e1).second;
				}
			}
		}

		for (int e2 = 0; e2 < u2; e2++) {
			//printf("%f\n", G2data.at(e2).second);
			if (e2 == 0) {
				G2minstore.at(s2) = G2data.at(e2).second;
			}

			if (G2data.at(e2).first > set_radian2) {
				set_radian2 += 1;
				s2++;
				if (s2 > 5) {
					break;
				}
				G2minstore.at(s2) = G2data.at(e2).second;
			}

			if (G2data.at(e2).first < set_radian2) {
				if (G2maxstore.at(s2) < G2data.at(e2).second) {
					G2maxstore.at(s2) = G2data.at(e2).second;
				}

				if (G2minstore.at(s2) > G2data.at(e2).second) {
					G2minstore.at(s2) = G2data.at(e2).second;
					//printf("in\n");
				}
			}
		}

		for (int e3 = 0; e3 < u3; e3++) {
			if (e3 == 0) {
				G3minstore.at(s3) = G3data.at(e3).second;
			}

			if (G3data.at(e3).first > set_radian3) {
				set_radian3 += 1;
				s3++;
				if (s3 > 5) {
					break;
				}
				G3minstore.at(s3) = G3data.at(e3).second;
			}

			if (G3data.at(e3).first < set_radian3) {
				if (G3maxstore.at(s3) < G3data.at(e3).second) {
					G3maxstore.at(s3) = G3data.at(e3).second;
				}

				if (G3minstore.at(s3) > G3data.at(e3).second) {
					G3minstore.at(s3) = G3data.at(e3).second;
				}
			}
		}

		sort(G1maxstore.rbegin(), G1maxstore.rend());
		sort(G2maxstore.rbegin(), G2maxstore.rend());
		sort(G3maxstore.rbegin(), G3maxstore.rend());
		sort(G1minstore.begin(), G1minstore.end());
		sort(G2minstore.begin(), G2minstore.end());
		sort(G3minstore.begin(), G3minstore.end());

		if (s1 == 0 || s2 == 0 || s3 == 0) {
			asp1.at(r) = 0;
			asp2.at(r) = 0;
			asp3.at(r) = 0;
			continue;
		}

		asp1.at(r) = G1maxstore.at(0) / G1minstore.at((double)6 - s1);
		asp2.at(r) = G2maxstore.at(0) / G2minstore.at((double)6 - s2);
		asp3.at(r) = G3maxstore.at(0) / G3minstore.at((double)6 - s3);

		//printf("red:%f green:%f blue:%f\n", asp1.at(r), asp2.at(r), asp3.at(r));
		//imshow("a", img);
		waitKey(1);

	}

	double base_asp1 = 0;
	double base_asp2 = 0;
	double base_asp3 = 0;
	int index1 = 0;
	int index2 = 0;
	int index3 = 0;

	for (int z = 0; z < 5; z++) {
		if (asp1.at(z) > base_asp1) {
			base_asp1 = asp1.at(z);
			index1 = z;
		}
		if (asp2.at(z) > base_asp2) {
			base_asp2 = asp2.at(z);
			index2 = z;
		}
		if (asp3.at(z) > base_asp3) {
			base_asp3 = asp3.at(z);
			index3 = z;
		}
	}

	//line(img, edge1, G1.at(index1), Scalar(0, 0, 200), 3, 4);
	//line(img, edge2, G2.at(index2), Scalar(0, 200, 0), 3, 4);
	//line(img, edge3, G3.at(index3), Scalar(200, 0, 0), 3, 4);

	Point v1 = center(edge2, G2.at(index2), edge1, G1.at(index1));
	Point v2 = center(edge3, G3.at(index3), edge2, G2.at(index2));
	Point v3 = center(edge1, G1.at(index1), edge3, G3.at(index3));
	//circle(img, v1, 5, Scalar(0, 255, 255), -1, 5);
	//circle(img, v2, 5, Scalar(255, 255, 0), -1, 5);
	//circle(img, v3, 5, Scalar(255, 0, 255), -1, 5);
	Point v = Point(0, 0);
	v.x = (v1.x + v2.x + v3.x) / 3;
	v.y = (v1.y + v2.y + v3.y) / 3;

	//circle(img3, v + Point(150, 50), 5, Scalar(155, 155, 155), -1, 5);
	//imshow("a", img);
	//waitKey(0);

	Point A = Point(0, 0);
	Point B = Point(0, 0);
	double cos = 0, theta = 0;

	A.x = edge2.x - v.x;
	A.y = edge2.y - v.y;
	B.x = edge3.x - v.x;
	B.y = edge3.y - v.y;

	cos = ((double)A.x * (double)B.x + (double)A.y * (double)B.y) / (sqrt(pow(A.x, 2) + pow(A.y, 2)) * sqrt(pow(B.x, 2) + pow(B.y, 2)));
	theta = acos(cos) * (double)180 / PI;
	if (theta > 90) {
		//imshow("open", img3);
	}
	printf("%f\n", theta);
	return { v,theta };
}

int main(int argc, const char* argv[]) {
	VideoCapture capture(0);
	Mat frame1, frame2, gry;
	Mat img, img2, img3;
	Rect selection(150, 50, 400, 350);
	Mat diff;
	Mat edge;
	Point G = Point(0, 0);
	

	SYSTEMTIME systime;//時間記録用
	FILE* fp = NULL;
	char FileName[127] = { "FILE_AD" };//ファイルの名前用の文字列
	GetLocalTime(&systime);
	errno_t error;
	sprintf_s(FileName, "%d%d_%dh%dm%d.csv", systime.wMonth, systime.wDay, systime.wHour, systime.wMinute, systime.wSecond);
	error = fopen_s(&fp, FileName, "w+");//ファイル書き込み呼び出し
	for (;;) {
		capture >> frame1;
		imshow("test",frame1);
		if (waitKey(33) == 27) {
			break;
		}
	}
	//frame1 = imread("image1.png");
	
	for (;;) {
		//frame2 = imread("image2.png");
		capture >> frame2;
		img = frame2.clone();
		img2 = frame2.clone();
		img3 = frame2.clone();
		diff = Bit_Wise2(frame1(selection), frame2(selection));
		medianBlur(diff, diff, 3);
		Canny(diff, edge, 50, 100, 3, true);
		dilate(edge, edge, Mat(), Point(-1, -1), 7);
		bitwise_and(img2(selection), img2(selection), img, edge);
		//imshow("a", img);
		auto algorithm = AKAZE::create();
		vector<KeyPoint> keypoint;
		algorithm->detect(img, keypoint);
		if (keypoint.size() < 100) {
			continue;
		}
		/*
		Point v = three_seg(keypoint).first;
		double theta = three_seg(keypoint).second;
		circle(img3, v+Point(150,50), 5, Scalar(0, 255, 255), 2, 5);
		imshow("open", img3);
		*/
		int m1 = 0, m2 = 0, m3 = 0;
		//重心探索
		int a = 0;
		double sumx = 0, sumy = 0;
		for (int i = 0; i < keypoint.size(); i++) {
			//circle(img, keypoint.at(i).pt, 1, Scalar(0, 255, 255), 2, 5);
			sumx += (double)keypoint.at(i).pt.x;
			sumy += (double)keypoint.at(i).pt.y;
			a++;
		}
		G.x = sumx / (double)a;
		G.y = sumy / (double)a;
		circle(img, G, 4, Scalar(255, 0, 255), 2, 5);//重心

		//端点探索
		vector<pair<double, double>> data(a);//radian,distance
		for (int j = 0; j < a; j++) {
			data.at(j).second = sqrt(pow(G.x - (double)keypoint.at(j).pt.x, 2) + pow(G.y - (double)keypoint.at(j).pt.y, 2));
			data.at(j).first = atan2(G.y - (double)keypoint.at(j).pt.y, G.x - (double)keypoint.at(j).pt.x);
			//degree.at(j) = radian.at(j) * (double)180 / PI;
			//printf("%f,%f\n", data.at(j).first, data.at(j).second);
		}
		sort(data.begin(), data.end());
		vector<pair<double, int>> store(6);//distance,index
		Point edge1 = Point(0, 0);
		Point edge2 = Point(0, 0);
		Point edge3 = Point(0, 0);
		Point edge_tmp = Point(0, 0);
		double set_radian = -2;
		int s = 0;
		//ラジアン6等分&最大値取得
		for (int k = 0; k < a; k++) {
			if (data.at(k).first > set_radian) {
				set_radian += 1;
				s++;
				if (s > 5) {
					break;
				}
			}

			if (data.at(k).first < set_radian) {
				if (store.at(s).first < data.at(k).second) {
					store.at(s).first = data.at(k).second;
					store.at(s).second = k;
				}
			}
		}

		sort(store.rbegin(), store.rend());
		for (int b = 0; b < 2; b++) {
			if (abs(store.at(b + 1).second - store.at(b).second) < 2) {
				store.at(b + 1) = store.at(b + 2);
				store.at(b + 2) = store.at(b + 3);
			}
		}

		vector<double> distance(a);
		for (int q = 0; q < a; q++) {
			distance.at(q) = sqrt(pow(G.x - (double)keypoint.at(q).pt.x, 2) + pow(G.y - (double)keypoint.at(q).pt.y, 2));
			if (distance.at(q) == store.at(0).first) {
				edge1 = keypoint.at(q).pt;
			}
			else if (distance.at(q) == store.at(1).first) {
				edge2 = keypoint.at(q).pt;
			}
			else if (distance.at(q) == store.at(2).first) {
				edge3 = keypoint.at(q).pt;
			}
		}
		if (sqrt(pow(edge2.x - edge3.x, 2) + pow(edge2.y - edge3.y, 2)) < 40) {
			continue;
		}

		if (edge1.x > edge2.x) {
			edge_tmp = edge2;
			edge2 = edge1;
			edge1 = edge_tmp;
		}
		if (edge1.x > edge3.x) {
			edge_tmp = edge3;
			edge3 = edge1;
			edge1 = edge_tmp;
		}
		circle(img, edge1, 4, Scalar(0, 0, 255), -1, 5);//端点
		circle(img, edge2, 4, Scalar(0, 255, 0), -1, 5);//端点
		circle(img, edge3, 4, Scalar(255, 0, 0), -1, 5);//端点
		imshow("a1", img);
		waitKey(1);

		//領域探索
		vector<double>distance1(a);
		vector<double>distance2(a);
		vector<double>distance3(a);
		vector<Point>keep1(a);
		vector<Point>keep2(a);
		vector<Point>keep3(a);
		vector<Point> G1(5);
		vector<Point> G2(5);
		vector<Point> G3(5);
		vector<double>G1maxstore(6);
		vector<double>G1minstore(6);
		vector<double>G2maxstore(6);
		vector<double>G2minstore(6);
		vector<double>G3maxstore(6);
		vector<double>G3minstore(6);
		vector<double> asp1(5);
		vector<double> asp2(5);
		vector<double> asp3(5);

		
		for (int r = 0; r < 5; r++) {//領域増加
			int u1 = 0, u2 = 0, u3 = 0;
			double sumx1 = 0;
			double sumy1 = 0;
			double sumx2 = 0;
			double sumy2 = 0;
			double sumx3 = 0;
			double sumy3 = 0;
			//double set_distance = (store.at(0).first / 3)+(store.at(0).first / 8)*r;
			double set_distance = (store.at(0).first / 6) * (r + 1);
			
			for (int u = 0; u < a; u++) {//全体検索
				distance1.at(u) = sqrt(pow(edge1.x - (double)keypoint.at(u).pt.x, 2) + pow(edge1.y - (double)keypoint.at(u).pt.y, 2));
				distance2.at(u) = sqrt(pow(edge2.x - (double)keypoint.at(u).pt.x, 2) + pow(edge2.y - (double)keypoint.at(u).pt.y, 2));
				distance3.at(u) = sqrt(pow(edge3.x - (double)keypoint.at(u).pt.x, 2) + pow(edge3.y - (double)keypoint.at(u).pt.y, 2));
				if (distance1.at(u) < set_distance) {
					sumx1 += keypoint.at(u).pt.x;
					sumy1 += keypoint.at(u).pt.y;
					keep1.at(u1) = keypoint.at(u).pt;
					circle(img, keypoint.at(u).pt, 1, Scalar(0, 0, 255), 2, 5);
					u1++;
				}
				
				if (distance2.at(u) < set_distance) {
					sumx2 += keypoint.at(u).pt.x;
					sumy2 += keypoint.at(u).pt.y;
					keep2.at(u2) = keypoint.at(u).pt;
					circle(img, keypoint.at(u).pt, 1, Scalar(0, 255, 0), 2, 5);
					u2++;
				}
				
				if (distance3.at(u) < set_distance) {
					sumx3 += keypoint.at(u).pt.x;
					sumy3 += keypoint.at(u).pt.y;
					keep3.at(u3) = keypoint.at(u).pt;
					circle(img, keypoint.at(u).pt, 1, Scalar(255, 0, 0), 2, 5);
					u3++;
				}
			}
			
			G1.at(r).x = sumx1 / (double)u1;
			G1.at(r).y = sumy1 / (double)u1;
			G2.at(r).x = sumx2 / (double)u2;
			G2.at(r).y = sumy2 / (double)u2;
			G3.at(r).x = sumx3 / (double)u3;
			G3.at(r).y = sumy3 / (double)u3;
			
			vector<pair<double, double>> G1data(u1);//radian,distance
			vector<pair<double, double>> G2data(u2);//radian,distance
			vector<pair<double, double>> G3data(u3);//radian,distance
			
			
			//長さと角度の計算
			for (int r1 = 0; r1 < u1; r1++) {
				G1data.at(r1).second = sqrt(pow(G1.at(r).x - keep1.at(r1).x, 2) + pow(G1.at(r).y - keep1.at(r1).y, 2));
				G1data.at(r1).first = atan2(G1.at(r).y - keep1.at(r1).y, G1.at(r).x - keep1.at(r1).x);
				//printf("%f,%f\n", G1data.at(r1).first, G1data.at(r1).second);
			}
			//printf("\n");
			for (int r2 = 0; r2 < u2; r2++) {
				G2data.at(r2).second = sqrt(pow(G2.at(r).x - keep2.at(r2).x, 2) + pow(G2.at(r).y - keep2.at(r2).y, 2));
				G2data.at(r2).first = atan2(G2.at(r).y - keep2.at(r2).y, G2.at(r).x - keep2.at(r2).x);
				//printf("%f,%f\n", G2data.at(r2).first, G2data.at(r2).second);
			}
			//printf("\n");
			for (int r3 = 0; r3 < u3; r3++) {
				G3data.at(r3).second = sqrt(pow(G3.at(r).x - keep3.at(r3).x, 2) + pow(G3.at(r).y - keep3.at(r3).y, 2));
				G3data.at(r3).first = atan2(G3.at(r).y - keep3.at(r3).y, G3.at(r).x - keep3.at(r3).x);
				//printf("%f,%f\n", G3data.at(r3).first, G3data.at(r3).second);
			}
			
			sort(G1data.begin(), G1data.end());
			sort(G2data.begin(), G2data.end());
			sort(G3data.begin(), G3data.end());
			int s1 = 0, s2 = 0, s3 = 0;
			double set_radian1 = -2;
			double set_radian2 = -2;
			double set_radian3 = -2;
			//ラジアン6等分&最大値取得
			for (int e1 = 0; e1 < u1; e1++) {

				if (e1 == 0) {
					G1minstore.at(s1) = G1data.at(e1).second;
				}

				if (G1data.at(e1).first > set_radian1) {
					set_radian1 += 1;
					s1++;
					if (s1 > 5) {
						break;
					}
					G1minstore.at(s1) = G1data.at(e1).second;
				}

				if (G1data.at(e1).first < set_radian1) {
					if (G1maxstore.at(s1) < G1data.at(e1).second) {
						G1maxstore.at(s1) = G1data.at(e1).second;
					}

					if (G1minstore.at(s1) > G1data.at(e1).second) {
						G1minstore.at(s1) = G1data.at(e1).second;
					}
				}
			}

			for (int e2 = 0; e2 < u2; e2++) {
				//printf("%f\n", G2data.at(e2).second);
				if (e2 == 0) {
					G2minstore.at(s2) = G2data.at(e2).second;
				}

				if (G2data.at(e2).first > set_radian2) {
					set_radian2 += 1;
					s2++;
					if (s2 > 5) {
						break;
					}
					G2minstore.at(s2) = G2data.at(e2).second;
				}

				if (G2data.at(e2).first < set_radian2) {
					if (G2maxstore.at(s2) < G2data.at(e2).second) {
						G2maxstore.at(s2) = G2data.at(e2).second;
					}

					if (G2minstore.at(s2) > G2data.at(e2).second) {
						G2minstore.at(s2) = G2data.at(e2).second;
						//printf("in\n");
					}
				}
			}

			for (int e3 = 0; e3 < u3; e3++) {
				if (e3 == 0) {
					G3minstore.at(s3) = G3data.at(e3).second;
				}

				if (G3data.at(e3).first > set_radian3) {
					set_radian3 += 1;
					s3++;
					if (s3 > 5) {
						break;
					}
					G3minstore.at(s3) = G3data.at(e3).second;
				}

				if (G3data.at(e3).first < set_radian3) {
					if (G3maxstore.at(s3) < G3data.at(e3).second) {
						G3maxstore.at(s3) = G3data.at(e3).second;
					}

					if (G3minstore.at(s3) > G3data.at(e3).second) {
						G3minstore.at(s3) = G3data.at(e3).second;
					}
				}
			}
			
			sort(G1maxstore.rbegin(), G1maxstore.rend());
			sort(G2maxstore.rbegin(), G2maxstore.rend());
			sort(G3maxstore.rbegin(), G3maxstore.rend());
			sort(G1minstore.begin(), G1minstore.end());
			sort(G2minstore.begin(), G2minstore.end());
			sort(G3minstore.begin(), G3minstore.end());

			if (s1 == 0 || s2 == 0 || s3 == 0) {
				asp1.at(r) = 0;
				asp2.at(r) = 0;
				asp3.at(r) = 0;
				continue;
			}
			
			asp1.at(r) = G1maxstore.at(0) / G1minstore.at((double)6 - s1);
			asp2.at(r) = G2maxstore.at(0) / G2minstore.at((double)6 - s2);
			asp3.at(r) = G3maxstore.at(0) / G3minstore.at((double)6 - s3);
			
			//printf("red:%f green:%f blue:%f\n", asp1.at(r), asp2.at(r), asp3.at(r));
			//imshow("a", img);
			waitKey(1);
			m1 = u1, m2 = u2, m3 = u3;
		}
		
		double base_asp1 = 0;
		double base_asp2 = 0;
		double base_asp3 = 0;
		int index1 = 0;
		int index2 = 0;
		int index3 = 0;

		for (int z = 0; z < 5; z++) {
			if (asp1.at(z) > base_asp1) {
				base_asp1 = asp1.at(z);
				index1 = z;
			}
			if (asp2.at(z) > base_asp2) {
				base_asp2 = asp2.at(z);
				index2 = z;
			}
			if (asp3.at(z) > base_asp3) {
				base_asp3 = asp3.at(z);
				index3 = z;
			}
		}
		
		vector<double> dev1x(m1);
		vector<double> dev1y(m1);
		vector<double> dev2x(m2);
		vector<double> dev2y(m2);
		vector<double> dev3x(m3);
		vector<double> dev3y(m3);
		double powdev1x = 0;
		double powdev1y = 0;
		double powdev2x = 0;
		double powdev2y = 0;
		double powdev3x = 0;
		double powdev3y = 0;
		double var1x = 0;
		double var1y = 0;
		double var2x = 0;
		double var2y = 0;
		double var3x = 0;
		double var3y = 0;
		double Sdev1 = 0;
		double Sdev2 = 0;
		double Sdev3 = 0;
		double cov1 = 0;
		double cov2 = 0;
		double cov3 = 0;
		double a1 = 0;
		double a2 = 0;
		double a3 = 0;
		double b1 = 0;
		double b2 = 0;
		double b3 = 0;
		Point C1 = Point(0, 0);
		Point C2 = Point(0, 0);
		Point C3 = Point(0, 0);

		for (int n1 = 0; n1 < m1; n1++) {
			dev1x.at(n1) = keep1.at(n1).x - G1.at(index1).x;
			dev1y.at(n1) = keep1.at(n1).y - G1.at(index1).y;
			powdev1x += pow(dev1x.at(n1),2);
			powdev1y += pow(dev1y.at(n1),2);
			Sdev1 += dev1x.at(n1) + dev1y.at(n1);
		}
		var1x = powdev1x / (double)m1;
		var1y = powdev1y / (double)m1;
		cov1 = Sdev1 / (double)m1;
		for (int n2 = 0; n2 < m2; n2++) {
			dev2x.at(n2) = keep2.at(n2).x - G2.at(index2).x;
			dev2y.at(n2) = keep2.at(n2).y - G2.at(index2).y;
			powdev2x += pow(dev2x.at(n2), 2);
			powdev2y += pow(dev2x.at(n2), 2);
			Sdev2 += dev2x.at(n2) + dev2y.at(n2);
		}
		var2x = powdev2x / (double)m2;
		var2y = powdev2y / (double)m2;
		cov2 = Sdev2 / (double)m2;
		for (int n3 = 0; n3 < m3; n3++) {
			dev3x.at(n3) = keep3.at(n3).x - G3.at(index3).x;
			dev3y.at(n3) = keep3.at(n3).y - G3.at(index3).y;
			powdev3x += pow(dev3x.at(n3), 2);
			powdev3y += pow(dev3x.at(n3), 2);
			Sdev3 += dev3x.at(n3) + dev3y.at(n3);
		}
		var3x = powdev3x / (double)m3;
		var3y = powdev3y / (double)m3;
		cov3 = Sdev3 / (double)m3;

		a1 = cov1 / var1x;
		a2 = cov2 / var2x;
		a3 = cov3 / var3x;
		b1 = G1.at(index1).y - a1 * G1.at(index1).x;
		b2 = G2.at(index2).y - a2 * G2.at(index2).x;
		b3 = G3.at(index3).y - a3 * G3.at(index3).x;

		C1.x = (b2 - b1) / (a1 - a2);
		C1.y = a1 * C1.x + b1;
		C2.x = (b3 - b2) / (a2 - a3);
		C2.y = a2 * C2.x + b2;
		C3.x = (b1 - b3) / (a3 - a1);
		C3.y = a3 * C3.x + b3;
		printf("%d,%d\n", C1.x, C1.y);
		printf("%d,%d\n", C2.x, C2.y);
		printf("%d,%d\n", C3.x, C3.y);
		//line(img, edge1, G1.at(index1), Scalar(0, 0, 200), 3, 4);
		//line(img, edge2, G2.at(index2), Scalar(0, 200, 0), 3, 4);
		//line(img, edge3, G3.at(index3), Scalar(200, 0, 0), 3, 4);

		Point v1 = center(edge2, G2.at(index2), edge1, G1.at(index1));
		Point v2 = center(edge3, G3.at(index3), edge2, G2.at(index2));
		Point v3 = center(edge1, G1.at(index1), edge3, G3.at(index3));
		circle(img, C1, 5, Scalar(0, 255, 255), -1, 5);
		circle(img, C2, 5, Scalar(255, 255, 0), -1, 5);
		circle(img, C3, 5, Scalar(255, 0, 255), -1, 5);
		Point v = Point(0, 0);
		v.x = (v1.x + v2.x + v3.x) / 3;
		v.y = (v1.y + v2.y + v3.y) / 3;

		circle(img3, v+Point(150,50), 5, Scalar(155, 155, 155), -1, 5);
		Rect roi(v.x + 150, v.y , 190, 170);
		rectangle(img3,roi, Scalar(255, 55, 255), 1);
		imshow("a", img);
		//waitKey(0);

		Point A = Point(0, 0);
		Point B = Point(0, 0);
		double cos = 0, theta = 0;
		
		A.x = edge2.x - v.x;
		A.y = edge2.y - v.y;
		B.x = edge3.x - v.x;
		B.y = edge3.y - v.y;

		cos = ((double)A.x * (double)B.x + (double)A.y * (double)B.y) / (sqrt(pow(A.x, 2) + pow(A.y, 2)) * sqrt(pow(B.x, 2) + pow(B.y, 2)));
		theta = acos(cos) * (double)180 / PI;
		if (theta > 90) {
			imshow("open", img3);
		}
		//printf("%f\n", theta);
		fprintf(fp, "%f\n",theta);
		waitKey(1);
		
		if (waitKey(33) == 'q') {
			break;
		}
		
		frame1 = img3.clone();
	}
	return 0;
}
